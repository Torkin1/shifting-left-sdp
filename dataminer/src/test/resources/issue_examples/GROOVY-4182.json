{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12815099","self":"https://issues.apache.org/jira/rest/api/2/issue/12815099","key":"GROOVY-4182","fields":{"fixVersions":[{"self":"https://issues.apache.org/jira/rest/api/2/version/12331850","id":"12331850","description":"","name":"1.8-beta-3","archived":false,"released":true,"releaseDate":"2010-12-15"}],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/1","id":"1","description":"A fix for this issue is checked into the tree and tested.","name":"Fixed"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12312320":null,"customfield_12310420":"9223372036854775807","customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/2","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/critical.svg","name":"Critical","id":"2"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"0.0","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[],"customfield_12311120":null,"customfield_12313826":null,"customfield_12312339":null,"issuelinks":[],"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[],"archiveddate":null,"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"9223372036854775807","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/GROOVY-4182/votes","votes":0,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"archivedby":null,"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/1","id":"1","description":"A problem which impairs or prevents the functions of the product.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype","name":"Bug","subtask":false,"avatarId":21133},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@636b2c97[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fb0410b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b99df9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@686c3c5c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57f88497[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8a3c3ba[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@413cd102[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@48bb8ba5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bf46219[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4ddcd4ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6acfa8b6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7ebdf0e9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12318123","id":"12318123","key":"GROOVY","name":"Groovy","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12318123&avatarId=24643","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12318123&avatarId=24643","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12318123&avatarId=24643","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12318123&avatarId=24643"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/13860","id":"13860","description":"Apache Groovy project","name":"Groovy"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12312521":"Tue Dec 14 10:43:48 UTC 2010","customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2010-12-14T10:43:48.350+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/GROOVY-4182/watchers","watchCount":0,"isWatching":false},"created":"2010-04-28T06:25:36.895+0000","updated":"2010-12-14T10:43:48.526+0000","timeoriginalestimate":null,"description":"Profiler shows average 1ms per call in our multi-threaded (20 threads) application in most of the calls to PojoMetaClassSite.call()\nbecause of static atomic Inreger is used (categoriesInUse) in GroovyCategorySupport.hasCategoryInCurrentThread():\n\n    public static boolean hasCategoryInCurrentThread() {\n        return categoriesInUse.get() != 0 && threadInfo.getInfo().level != 0;\n    }\n","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"attachment":[],"customfield_12312340":null,"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"very bad performance in GroovyCategorySupport because of static AtomicInteger use","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469266","id":"14469266","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"funny, just a few days ago I had a look at this method. I replaced it locally with a simple boolean instead of the usage of the AtomicIntger. But the performance was going up by maybe 1% in my test only, with a very big range of times, so that this 1% might be below the border an effect gets really measurable. AtomicInteger#get does read from a volatile, an action that people say can be realized on SPARC and Ix86/Ix64 architecture by a simple load without memory fences and thus without wait times for the value. A volatile read can cost much if it is on a different architecture. Is that the case for you? If yes, then my boolean version may help you, since it does not use any volatiles or atomics. But if you are on one of the architectures metioned above, it will not make a major difference. \n\nThe matter is entirely different if you actually use categories. I have assumed you do not.\n\nAre you sure the AtomicInteger#get is responsible for the timing you see?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-04-28T12:37:03.052+0000","updated":"2010-04-28T12:37:03.052+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469301","id":"14469301","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"body":"Ubuntu 9.10 Linux Sun JDK 1.6\nNetBeans profiler shows total 35ms spent in method GroovyCategorySupport.hasCategoryInCurrentThread() for about 30 calls.\nAnd this is for trivial 30 field xml dom access in 40 line groovy script.\n\nGroovyCategorySupport.hasCategoryInCurrentThread eats 95% of the whole processing time.\n\nAs I mention I have 20 threads running concurrently and doing same task in groovy (dom access).\nAnd this is EXTREMELY important!\nWith a single threaded test you will never be able to see real performance impact.\n\nNot sure if u're up to date on volatile implementation in Java 5: http://www.javamex.com/tutorials/synchronization_volatile_java_5.shtml\n\nSo it's essentially a global lock now.\nI'm pretty sure it can be avoided easily in your case.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"created":"2010-04-28T14:25:59.615+0000","updated":"2010-04-28T14:25:59.615+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469342","id":"14469342","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"body":"CPU: x86","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"created":"2010-04-28T14:28:41.066+0000","updated":"2010-04-28T14:28:41.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469369","id":"14469369","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"The test I did was calculating a fibonacci number in a couple of threads in parallel. My test was on Sun JDK6 on a 64bit machine on Ubuntu. I am aware of the Java Memory Model as it exists since Java5. The information I gave you about the volatile read is according to that memory model and from several people from the concurrent area (including Doug Lea). A volatile read does not need a hardware lock because of the memory model the CPUs use on those platforms.\n\nBut I get the feeling that in your case the program does not run long enough to be compiled by hotspot. You can add these JVM parameters {code}\n-XX:+UnlockDiagnosticVMOptions -XX:PrintAssemblyOptions=hsdis-print-bytes -XX:CompileCommand=print,org/codehaus/groovy/runtime/GroovyCategorySupport.hasCategoryInCurrentThread\n{code]\nto see if you get some assembler code for the method. This way you could be sure it is really compiled.\n\nBut as I said, giving an example I can use to reproduce the problem would help me.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-04-28T15:50:55.455+0000","updated":"2010-04-28T15:50:55.455+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469343","id":"14469343","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"body":"Hi,\nI'm running on 32bit x86 architecture not 64bit.\nMemory barrier is essentially a lock for a duration of memory operation, but just a hardware based lock and all this is quantitative rather then qualitative difference...\nUnfortunately I cannot attach test case because it is part of application.\nIn thread payloads I'm just reading XML similar to this:\nhttp://groovy.codehaus.org/Reading+XML+using+Groovy's+XmlParser\nWhile Fibbonachi calculation is a syntetic test.\n\nBut does use of this lock is totally necessary from the design point of view? cannot be enough with thread local?\nIt is very easy to add locks and it is very difficult to remove them after.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"created":"2010-05-03T11:06:42.704+0000","updated":"2010-05-03T11:06:42.704+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469365","id":"14469365","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"A memory barrier is a bit more, since it requires are synchronization of the main memory with the processor cache. This operation is of course much slower, than just reading from the CPU cache. In that regard, there is of course a major difference between reading from the local cache and having to sync. Of course a cache miss may cause something like that too.\n\nA volatile has in general better performance than a ThreadLocal, at least if you have to get the ThreadLocal on each request.\n\nAs for the test case.. I was hoping you cold provide something that exhibits the same problem. It doesn't have to be exactly what you do in your application. But as it is, it may very well be, that my change from the volatile boolean to not being volatile will not have any effect.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-05-05T07:07:56.171+0000","updated":"2010-05-05T07:07:56.171+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469317","id":"14469317","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"body":"Excuse me, but this is complete nonsense!\nFirst of all memory barriers not only involve cache synchronizations but the also serialize the memory operations by different contexts.\nhttp://en.wikipedia.org/wiki/Memory_barrier\nPlease re-read this arcicle http://www.javamex.com/tutorials/synchronization_volatile_java_5.shtml which clearly states that  volatile keyword semantics DID CHANGE in Java 5, which reduced concurrency and now is comparable with synchronized().\n\nYour statement about ThreadLocal just shows major incompetence in the subject!\nThreadLocal is using simple non-synchronized memory access from thread local storage. This is a simple read operation, in comparison to a synchronized read which is implemented! This memory is part of thread storage space allocated by oerating system. This is the SAME memory as the stack or heap is using! there is NO any performance penalty on accesing this memory!\nhttp://en.wikipedia.org/wiki/Thread-local_storage\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"created":"2010-05-08T06:39:22.944+0000","updated":"2010-05-08T06:39:22.944+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469429","id":"14469429","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"Don't get me wrong, I am talking here only about java5, not before. I am aware that it changed and I am not questioning that. Not sure were you got this idea from. What I was saying is, that volatile read can be done on x86 without going through a memory barrier, because of the memory model used. This is not my personal believe. Some comments from the concurrency-interest list: Hans Boehm, April 27, 2010: \"On X86 or SPARC TSO or similar, there no memory fence/barrier instruction is needed on the read side, even if volatiles are used.  Ever.\". I could verify that by looking at the assembler code generated for such a volatile access. My statement that ThreadLocal is slower than a volatile depends on personal experience and confirmation from several sides. ThreadLocal can be equally fast, if not faster than volatile, if, and only if you don't have to go and get the ThreadLocal object anew - meaning you don't have to get the thread local space first. I am not talking about object creation here. ThreadLocal has kind of a map that stores the thread local spaces and getting the current thread and using that to go through the map to finally get the thread local storage is what slows it down. Since exactly that would have to be done at the place in question, you will end up slower than with using a volatile. And yes, I tested this. We are not talking about a big difference here of course, but it is a difference.\n\nBut who cares. I announced I will replace categoriesInUse.get() with a simple boolean I already said. Then it is a direct memory access for sure. I only warned that in my tests this was not giving a major improvement. That is also why I asked for a testcase.\n\nAnother reasons I was asking for one is, because I think the time is not spend in the AtomicBoolean, I think it is spend in the threadInfo.getInfo().level part. Which should be only the case if you have categories active in your code while this part is handled. \n\nBut ok... since we seem to have a major difference somewhere, there is a simple way of testing if the approach will be ok or not. I can give you a patch or something like that and you test it on your system. Are you willing to do that?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-05-08T07:12:10.750+0000","updated":"2010-05-08T07:12:10.750+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14469417","id":"14469417","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"body":"Hi.\nthat would be great (patch).\nI can teest. it will be much easier here. I can share profilig results after.\nThanks and regards.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=vkorehov","name":"vkorehov","key":"vkorehov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Vladislavs Korehovs","active":true,"timeZone":"Etc/UTC"},"created":"2010-05-09T07:37:35.670+0000","updated":"2010-05-09T07:37:35.670+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14470294","id":"14470294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"took quite some time, sorry.... trunk would now contain a fixed version for this... you want to try it?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-10-15T04:47:43.590+0000","updated":"2010-10-15T04:47:43.590+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12815099/comment/14470438","id":"14470438","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"body":"I declare it as fixed until further notice. Vladislavs, should the issue not be fixed in your view, feel free to reopen the issue","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=blackdrag","name":"blackdrag","key":"blackdrag","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=blackdrag&avatarId=29238","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=blackdrag&avatarId=29238","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=blackdrag&avatarId=29238","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=blackdrag&avatarId=29238"},"displayName":"Jochen Theodorou","active":true,"timeZone":"Etc/UTC"},"created":"2010-12-14T10:43:48.462+0000","updated":"2010-12-14T10:43:48.462+0000"}],"maxResults":11,"total":11,"startAt":0},"customfield_12311820":"0|i2covb:","customfield_12314139":null}}