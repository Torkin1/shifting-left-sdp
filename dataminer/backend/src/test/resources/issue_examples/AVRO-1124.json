{"expand":"renderedFields,names,schema,operations,editmeta,changelog,versionedRepresentations","id":"12598315","self":"https://issues.apache.org/jira/rest/api/2/issue/12598315","key":"AVRO-1124","fields":{"fixVersions":[],"resolution":{"self":"https://issues.apache.org/jira/rest/api/2/resolution/10011","id":"10011","description":"Won't Do","name":"Won't Do"},"customfield_12312322":null,"customfield_12312323":null,"customfield_12310420":"253674","customfield_12312320":null,"customfield_12312321":null,"customfield_12312328":null,"customfield_12312329":null,"customfield_12312326":null,"customfield_12310300":null,"customfield_12312327":null,"customfield_12312324":null,"customfield_12312720":null,"customfield_12312325":null,"lastViewed":null,"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"labels":[],"customfield_12312333":null,"customfield_12312334":null,"customfield_12313422":"false","customfield_12310310":"8.0","customfield_12312331":null,"customfield_12312332":null,"aggregatetimeoriginalestimate":null,"timeestimate":null,"customfield_12312330":null,"versions":[],"customfield_12311120":null,"customfield_12313826":null,"issuelinks":[{"id":"12368346","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12368346","type":{"id":"10032","name":"Blocker","inward":"is blocked by","outward":"blocks","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"},"inwardIssue":{"id":"12645507","key":"AVRO-1315","self":"https://issues.apache.org/jira/rest/api/2/issue/12645507","fields":{"summary":"Java: Schema Validation utilities","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/6","description":"The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/closed.png","name":"Closed","id":"6","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/2","id":"2","description":"A new feature of the product, which has yet to be developed.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype","name":"New Feature","subtask":false,"avatarId":21141}}}},{"id":"12420980","self":"https://issues.apache.org/jira/rest/api/2/issueLink/12420980","type":{"id":"12310000","name":"Duplicate","inward":"is duplicated by","outward":"duplicates","self":"https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"},"inwardIssue":{"id":"12819361","key":"AVRO-1661","self":"https://issues.apache.org/jira/rest/api/2/issue/12819361","fields":{"summary":"Schema Evolution not working ","status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"priority":{"self":"https://issues.apache.org/jira/rest/api/2/priority/3","iconUrl":"https://issues.apache.org/jira/images/icons/priorities/major.svg","name":"Major","id":"3"},"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/4","id":"4","description":"An improvement or enhancement to an existing feature or task.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype","name":"Improvement","subtask":false,"avatarId":21140}}}}],"customfield_12312339":null,"customfield_12313825":null,"assignee":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"customfield_12312337":null,"customfield_12313823":null,"customfield_12312338":null,"customfield_12311920":null,"customfield_12313822":null,"customfield_12312335":null,"customfield_12313821":null,"customfield_12312336":null,"customfield_12313820":null,"status":{"self":"https://issues.apache.org/jira/rest/api/2/status/5","description":"A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.","iconUrl":"https://issues.apache.org/jira/images/icons/statuses/resolved.png","name":"Resolved","id":"5","statusCategory":{"self":"https://issues.apache.org/jira/rest/api/2/statuscategory/3","id":3,"key":"done","colorName":"green","name":"Done"}},"components":[{"self":"https://issues.apache.org/jira/rest/api/2/component/12312780","id":"12312780","name":"java","description":"The Java implementation of the Avro specification."}],"archiveddate":null,"customfield_12312026":null,"customfield_12312023":null,"customfield_12312024":null,"aggregatetimeestimate":null,"customfield_12312022":null,"customfield_12310921":null,"customfield_12310920":"80491","customfield_12312823":null,"creator":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"subtasks":[],"reporter":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"aggregateprogress":{"progress":0,"total":0},"customfield_12313520":null,"customfield_12310250":null,"progress":{"progress":0,"total":0},"customfield_12313924":null,"votes":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AVRO-1124/votes","votes":37,"hasVoted":false},"worklog":{"startAt":0,"maxResults":20,"total":0,"worklogs":[]},"archivedby":null,"customfield_12313920":null,"issuetype":{"self":"https://issues.apache.org/jira/rest/api/2/issuetype/2","id":"2","description":"A new feature of the product, which has yet to be developed.","iconUrl":"https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype","name":"New Feature","subtask":false,"avatarId":21141},"timespent":null,"customfield_12314020":"{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e78bbe[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@52585f78[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2592a05a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3521880f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d1a101d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@65338259[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55936ed5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6c4bf598[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71cc8af4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@814ffde[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@463fddcf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@756b17a5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}","customfield_12314141":null,"customfield_12314140":null,"project":{"self":"https://issues.apache.org/jira/rest/api/2/project/12310911","id":"12310911","key":"AVRO","name":"Apache Avro","projectTypeKey":"software","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/projectavatar?pid=12310911&avatarId=53603","24x24":"https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12310911&avatarId=53603","16x16":"https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12310911&avatarId=53603","32x32":"https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12310911&avatarId=53603"},"projectCategory":{"self":"https://issues.apache.org/jira/rest/api/2/projectCategory/10420","id":"10420","description":"a serialization system","name":"Avro"}},"aggregatetimespent":null,"customfield_12312520":null,"customfield_12312521":"Fri Sep 02 12:34:53 UTC 2022","customfield_12314422":null,"customfield_12314421":null,"customfield_12314146":null,"customfield_12314420":null,"customfield_12314145":null,"customfield_12314144":null,"customfield_12314143":null,"resolutiondate":"2022-09-07T11:16:18.383+0000","workratio":-1,"customfield_12312923":null,"customfield_12312920":null,"customfield_12312921":null,"watches":{"self":"https://issues.apache.org/jira/rest/api/2/issue/AVRO-1124/watchers","watchCount":75,"isWatching":false},"created":"2012-07-11T03:46:41.557+0000","customfield_12310192":null,"customfield_12310191":null,"customfield_12310230":null,"updated":"2022-09-07T11:16:18.390+0000","timeoriginalestimate":null,"description":"\nMotivation: It is nice to be able to pass around data in serialized form but still know the exact schema that was used to serialize it. The overhead of storing the schema with each record is too high unless the individual records are very large. There are workarounds for some common cases: in the case of files a schema can be stored once with a file of many records amortizing the per-record cost, and in the case of RPC the schema can be negotiated ahead of time and used for many requests. For other uses, though it is nice to be able to pass a reference to a given schema using a small id and allow this to be looked up. Since only a small number of schemas are likely to be active for a given data source, these can easily be cached, so the number of remote lookups is very small (one per active schema version).\n\nBasically this would consist of two things:\n1. A simple REST service that stores and retrieves schemas\n2. Some helper java code for fetching and caching schemas for people using the registry\n\nWe have used something like this at LinkedIn for a few years now, and it would be nice to standardize this facility to be able to build up common tooling around it. This proposal will be based on what we have, but we can change it as ideas come up.\n\nThe facilities this provides are super simple, basically you can register a schema which gives back a unique id for it or you can query for a schema. There is almost no code, and nothing very complex. The contract is that before emitting/storing a record you must first publish its schema to the registry or know that it has already been published (by checking your cache of published schemas). When reading you check your cache and if you don't find the id/schema pair there you query the registry to look it up. I will explain some of the nuances in more detail below. \n\nAn added benefit of such a repository is that it makes a few other things possible:\n1. A graphical browser of the various data types that are currently used and all their previous forms.\n2. Automatic enforcement of compatibility rules. Data is always compatible in the sense that the reader will always deserialize it (since they are using the same schema as the writer) but this does not mean it is compatible with the expectations of the reader. For example if an int field is changed to a string that will almost certainly break anyone relying on that field. This definition of compatibility can differ for different use cases and should likely be pluggable.\n\nHere is a description of one of our uses of this facility at LinkedIn. We use this to retain a schema with \"log\" data end-to-end from the producing app to various real-time consumers as well as a set of resulting AvroFile in Hadoop. This schema metadata can then be used to auto-create hive tables (or add new fields to existing tables), or inferring pig fields, all without manual intervention. One important definition of compatibility that is nice to enforce is compatibility with historical data for a given \"table\". Log data is usually loaded in an append-only manner, so if someone changes an int field in a particular data set to be a string, tools like pig or hive that expect static columns will be unusable. Even using plain-vanilla map/reduce processing data where columns and types change willy nilly is painful. However the person emitting this kind of data may not know all the details of compatible schema evolution. We use the schema repository to validate that any change made to a schema don't violate the compatibility model, and reject the update if it does. We do this check both at run time, and also as part of the ant task that generates specific record code (as an early warning). \n\nSome details to consider:\n\nDeployment\nThis can just be programmed against the servlet API and deploy as a standard war. You have lots of instances and load balance traffic over them.\n\nPersistence\nThe storage needs are not very heavy. The clients are expected to cache the id=>schema mapping, and the server can cache as well. Even after several years of heavy use we have <50k schemas, each of which is pretty small. I think this part can be made pluggable and we can provide a jdbc- and file-based implementation as these don't require outlandish dependencies. People can easily plug in their favorite key-value store thingy if they like by implementing the right plugin interface. Actual reads will virtually always be cached in memory so this is not too important.\n\nGroup\nIn order to get the \"latest\" schema or handle compatibility enforcement on changes there has to be some way to group a set of schemas together and reason about the ordering of changes over these. I am going to call the grouping the \"group\". In our usage it is always the table or topic to which the schema is associated. For most of our usage the group name also happens to be the Record name as all of our schemas are records and our default is to have these match. There are use cases, though, where a single schema is used for multiple topics, each which is modeled independently. The proposal is not to enforce a particular convention but just to expose the group designator in the API. It would be possible to make the concept of group optional, but I can't come up with an example where that would be useful.\n\nCompatibility\nThere are really different requirements for different use cases on what is considered an allowable change. Likewise it is useful to be able to extend this to have other kinds of checks (for example, in retrospect, I really wish we had required doc fields to be present so we could require documentation of fields as well as naming conventions). There can be some kind of general pluggable interface for this like \n   SchemaChangeValidator.isValidChange(currentLatest, proposedNew)\nA reasonable implementation can be provided that does checks based on the rules in http://avro.apache.org/docs/current/spec.html#Schema+Resolution. Be default no checks need to be done. Ideally you should be able to have more than one policy (say one treatment for database schemas, one for logging event schemas, and one which does no checks at all). I can't imagine a need for more than a handful of these which would be statically configured (db_policy=com.mycompany.DBSchemaChangePolicy, noop=org.apache.avro.NoOpPolicy,...). Each group can configure the policy it wants to be used going forward with the default being none.\n\nSecurity and Authentication\nThere isn't any of this. The assumption is that this service is not publicly available and those accessing it are honest (though perhaps accident prone). These are just schemas, after all.\n\nIds\nThere are a couple of questions about ids how we make ids to represent the schemas:\n1. Are they sequential (1,2,3..) or hash based? If hash based, what is sufficient collision probability? \n2. Are they global or per-group? That is, if I know the id do I also need to know the group to look up the schema?\n3. What kind of change triggers a new id? E.g. if I update a doc field does that give a new id? If not then that doc field will not be stored.\n\nFor the id generation there are various options:\n- A sequential integer\n- AVRO-1006 creates a schema-specific 64-bit hash.\n- Our current implementation at LinkedIn uses the MD5 of the schema as the id.\n\nOur current implementation at LinkedIn uses the MD5 of the schema text after removing whitespace. The additional attributes like doc fields (and a few we made up) are actually important to us and we want them maintained (we add metadata fields of our own). This does mean we have some updates that generate a new schema id but don't cause a very meaningful semantic change to the schema (say because someone tweaked their doc string), but this doesn't hurt anything and it is nice to have the exact schema text represented. An example of uses these metadata fields is using the schema doc fields as the hive column doc fields.\n\nThe id is actually just a unique identifier, and the id generation algorithm can be made pluggable if there is a real trade-off. In retrospect I don't think using the md5 is good because it is 16 bytes, which for a small message is bulkier than needed. Since the id is retained with each message, size is a concern.\n\nThe AVRO-1006 fingerprint is super cool, but I have a couple concerns (possibly just due to misunderstanding):\n1. Seems to produce a 64-bit id. For a large number of schemas, 64 bits makes collisions unlikely but not unthinkable. Whether or not this matters depends on whether schemas are versioned per group or globally. If they are per group it may be okay, since most groups should only have a few hundred schema versions at most. If they are global I think it will be a problem. Probabilities for collision are given here under the assumption of perfect uniformity of the hash (it may be worse, but can't be better) http://en.wikipedia.org/wiki/Birthday_attack. If we did have a collision we would be dead in the water, since our data would be unreadable. If this becomes a standard mechanism for storing schemas people will run into this problem.\n2. Even 64-bits is a bit bulky. Since this id needs to be stored with every row size is a concern, though a minor one.\n3. The notion of equivalence seems to throw away many things in the schema (doc, attributes, etc). This is unfortunate. One nice thing about avro is you can add your own made-up attributes to the schema since it is just JSON. This acts as a kind of poor-mans metadata repository. It would be nice to have these maintained rather than discarded.\n\nIt is possible that I am misunderstanding the fingerprint scheme, though, so please correct me.\n\nMy personal preference would be to use a sequential id per group. The main reason I like this is because the id doubles as the version number, i.e. my_schema/4 is the 4th version of the my_schema record/group. Persisted data then only needs to store the varint encoding of the version number, which is generally going to be 1 byte for a few hundred schema updates. The string my_schema/4 acts as a global id for this. This does allow per-group sharding for id generation, but sharding seems unlikely to be needed here. A 50GB database would store 52 million schemas. 52 million schemas \"should be enough for anyone\". :-)\n\nProbably the easiest thing would be to just make the id generation scheme pluggable. That would kind of satisfy everyone, and, as a side-benefit give us at linkedin a gradual migration path off our md5-based ids. In this case ids would basically be opaque url-safe strings from the point of view of the repository and users could munge this id and encode it as they like.\n\nAPIs\nHere are the proposed APIs. This tacitly assumes ids are per-group, but the change if pretty minor if not:\n\nGet a schema by id\nGET /schemas/<group>/<id>\nIf the schema exists the response code will be 200 and the response body will be the schema text.\nIf it doesn't exist the response will be 404.\n\nGET /schemas\nProduces a list of group names, one per line.\n\nGET /schemas/group\nProduces a list of versions for the given group, one per line.\n\nGET /schemas/group/latest\nIf the group exists the response code will be 200 and the response body will be the schema text of the last registered schema.\nIf the group doesn't exist the response code will be 404.\n\nRegister a schema\nPOST /schemas/groups/<group_name>\nParameters:\nschema=<text of schema>\ncompatibility_model=XYZ\nforce_override=(true|false)\n\nThere are a few cases:\nIf the group exists and the change is incompatible with the current latest, the server response code will be 403 (forbidden) UNLESS the force_override flag is set in which case not check will be made.\nIf the server doesn't have an implementation corresponding to the given compatibility model key it will give a response code 400\nIf the group does not exist it will be created with the given schema (and compatibility model)\nIf the group exists and this schema has already been registered the server returns response code 200 and the id already assigned to that schema\nIf the group exists, but this schema hasn't been registered, and the compatibility checks pass, then the response code will be 200 and it will store the schema and return the id of the schema\n\nThe force_override flag allows registering an incompatible schema. We have found that sometimes you know \"for sure\" that your change is okay and just want to damn the torpedoes and charge ahead. This would be intended for manual rather than programmatic usage.\n\nIntended Usage\nLet's assume we are implementing a put and get API as a database would have using this registry, there is no substantial difference for a messaging style api. Here are the details of how this works:\n\nSay you have two methods \n  void put(table, key, record)\n  Record get(table, key)\n\nPut is expected to do the following under the covers:\n1. Check the record's schema against a local cache of schema=>id to get the schema id\n3. If it is not found then register it with the schema registry and get back a schema id and add this pair to the cache\n4. Store the serialized record bytes and schema id\n\nGet is expected to do the following:\n1. Retrieve the serialized record bytes and schema id from the store\n2. Check a local cache to see if this schema is known for this schema id\n3. If not, fetch the schema by id from the schema registry\n4. Deserialize the record using the schema and return it\n\nCode Layout\nWhere to put this code? Contrib package? Elsewhere? Someone should tell me...\n","customfield_10010":null,"timetracking":{},"customfield_12314523":null,"customfield_12314127":null,"customfield_12314522":null,"customfield_12314126":null,"customfield_12314521":null,"customfield_12314125":null,"customfield_12314520":null,"customfield_12314124":null,"customfield_12312340":null,"attachment":[{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12654165","id":"12654165","filename":"AVRO-1124.2.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T03:51:50.427+0000","size":177623,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12654165/AVRO-1124.2.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12654819","id":"12654819","filename":"AVRO-1124.3.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-09T15:39:19.080+0000","size":181167,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12654819/AVRO-1124.3.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12673962","id":"12673962","filename":"AVRO-1124.4.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-09T18:59:13.801+0000","size":179262,"mimeType":"text/x-patch","content":"https://issues.apache.org/jira/secure/attachment/12673962/AVRO-1124.4.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12576448","id":"12576448","filename":"AVRO-1124.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T22:52:06.142+0000","size":177047,"mimeType":"text/x-diff","content":"https://issues.apache.org/jira/secure/attachment/12576448/AVRO-1124.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12554947","id":"12554947","filename":"AVRO-1124.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-11-27T01:32:54.387+0000","size":144928,"mimeType":"text/x-diff","content":"https://issues.apache.org/jira/secure/attachment/12554947/AVRO-1124.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12577252","id":"12577252","filename":"AVRO-1124-can-read-with.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:26:20.790+0000","size":1647,"mimeType":"text/x-diff","content":"https://issues.apache.org/jira/secure/attachment/12577252/AVRO-1124-can-read-with.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12543376","id":"12543376","filename":"AVRO-1124-draft.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-01T00:00:31.168+0000","size":66974,"mimeType":"text/plain","content":"https://issues.apache.org/jira/secure/attachment/12543376/AVRO-1124-draft.patch"},{"self":"https://issues.apache.org/jira/rest/api/2/attachment/12577249","id":"12577249","filename":"AVRO-1124-validators-preliminary.patch","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:18:05.609+0000","size":32295,"mimeType":"text/x-diff","content":"https://issues.apache.org/jira/secure/attachment/12577249/AVRO-1124-validators-preliminary.patch"}],"customfield_12314123":null,"customfield_12312341":null,"customfield_12312220":null,"customfield_12314122":null,"customfield_12314121":null,"customfield_12314120":null,"customfield_12314129":null,"customfield_12314524":null,"customfield_12314128":null,"summary":"RESTful service for holding schemas","customfield_12314130":null,"customfield_12310291":null,"customfield_12310290":null,"customfield_12311024":null,"customfield_12314138":null,"customfield_12314137":null,"environment":null,"customfield_12314136":null,"customfield_12314135":null,"customfield_12311020":null,"customfield_12314134":null,"duedate":null,"customfield_12314132":null,"customfield_12314131":null,"comment":{"comments":[{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13411274","id":"13411274","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"This looks great!\n\nRe: Fingerprints\nThese are not ideal identifiers for a schema registry for the reasons you cite.  These serve a variety of purposes however, one of which is that they can be used to make equivalence checks significantly faster by comparing the (cached) fingerprint before all of the schema elements.\n\nI agree that an incrementing integer is an ideal identifier.  Even with 1M schemas, that would take only 3 bytes as an Avro encoded integer.  If per group, the first 63 versions take one byte and up to 8191 take 2 bytes.  It makes sense to allow this id generation to be pluggable and support other types for those that want to use UUIDs, hashes, or strings.\n\nRe: code layout -- I propose we make set of new maven modules for this (e.g. avro-registry, avro-registry-persist-jdbc, avro-registry-persist-zookeeper, etc).  If you have code, I can do the maven part quickly.  Adding modules is easy as long as the code already has clean separation of packages and dependencies.\n\n\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-07-11T06:27:55.296+0000","updated":"2012-07-11T06:27:55.296+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13411826","id":"13411826","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"This sounds great.  Getting something committed to Apache SVN sooner might make it easier for folks to collaborate on extension points, layout, etc.  We might commit the first version of this to a development branch named AVRO-1124.  Then we can collaboratively make incompatible changes to APIs, packaging, etc., and merge it to trunk once we think things are stable enough to include in the next release.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-07-11T18:33:29.644+0000","updated":"2012-07-11T18:33:29.644+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13411857","id":"13411857","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Cool, I will try to get a patch against trunk ready. We can apply that on a branch or wherever makes sense. I should have something ready by early next week.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-07-11T18:57:04.060+0000","updated":"2012-07-11T18:57:04.060+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13411967","id":"13411967","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Is the branch necessary?  This service should not require changing existing avro modules and will only depend on them.  As long as it is in its own directory (e.g. lang/java/registry) and was not referenced by the aggregator lang/java/pom.xml then it will not be built, packaged, or published by the main build.  While under development it can be built by executing its build scripts within that location with no side effects outside of that.\n\n\nI look forward to seeing it!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-07-11T20:36:58.617+0000","updated":"2012-07-11T20:36:58.617+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13411984","id":"13411984","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"It's too soon to tell whether a branch would be useful.  I wanted to mention it as an option, to remove obstacles to committing something early.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-07-11T20:56:38.322+0000","updated":"2012-07-11T20:56:38.322+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13430794","id":"13430794","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Is this still in progress?\n\nI am willing to contribute resources to help push this through.  If it is partially complete, I would be happy to see a patch of the work in progress as myself or others may have time to take the next steps.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-08-08T01:13:09.562+0000","updated":"2012-08-08T01:13:09.562+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13431968","id":"13431968","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Yeah, got distracted for a few weeks, I will come back to it early next week.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-08-09T16:43:56.343+0000","updated":"2012-08-09T16:43:56.343+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13446185","id":"13446185","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Any status update?  I will begin building the core of this next week as I need this ASAP.   I would start with the core REST service and schema management with a stubbed out API for pluggable storage, id generation, and schema compatability checks.  My assessment is that with the tools I know well for a standalone REST service (Jersey + Jetty + Guice + Maven), I can get this done fairly rapidly.  A separate maven module in Avro can have a Java Client API, and later others can contribute implementations of the pluggable parts --  perhaps a Zookeeper id generator and an HBase storage back-end.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-08-31T18:02:50.115+0000","updated":"2012-08-31T18:03:33.287+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13446507","id":"13446507","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Here is a patch that has basic functionality:\n- Storage in mysql (probably good up to your first 20 million schemas)\n- Just a basic servlet for the service\n- Simple LRU caching that works on both the client and server side\n- Schemas are just strings which makes testing easy. The avro validation can be done with the pluggable validator.\n- An integration/stress test that registers a bunch of schemas and checks the answer\n\nCurrent patch works with jetty from command line. Theoretically it should be possible to package for any servlet container (added a context listener for that), but I haven't tried it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-01T00:00:31.170+0000","updated":"2012-09-01T00:00:31.170+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13446508","id":"13446508","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Hey Scott, I uploaded what I have, take a look and let's discuss.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-01T00:02:22.262+0000","updated":"2012-09-01T00:02:22.262+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13448360","id":"13448360","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Looks like a good start, thanks!\n\nA couple thoughts so far:\n\nI'll split this up into a family of maven modules:\n\n\n|| path from lang/java/ || description ||\n| schema-repo/common | common libraries and abstractions.  Ideally doesn't even depend on avro, only strings, etc. |\n| schema-repo/client | for the client, so that a client app can have minimal dependencies |\n| schema-repo/server | standalone server instance, can have dependencies that clients would not want |\n| schema-repo/mysql | perhaps jdbc, but there might not be much to share with a postgres implementation I'd make. |\n\nh3. ID Generation\nI think the API should be closer to \n{code}\n String getNextId(String source);\n{code}\n\nThe SchemaIdGenerator should be able to look up the latest id for a source if required.  I can think of a few cases that could generate a series of ids -- Zookeeper, with an atomic int kept per source, Postgres, with a sequence kept per source, and HBase atomic increment, and all of those store the latest in order to generate the next.  For an md5 generator it does not need the last id, but may need to validate that there is no collision per source.\n \nI am also thinking about how to make the ID optionally be a long instead of a string, so that we can use Avro to encode it before the datum in places like HBase or Kafka.\n\n\nh3. Schema change validator\nFor this interface, I also believe that it may be simpler to simply provide the source and the new schema, that is:\n\n{code}void validate(String source, String newSchema);{code}\ninstead of \n{code}void validate(String oldSchema, String newSchema){code}\n\nAssuming the validator has access to all schemas in the source.  Some validators may only be interested in the delta between the new one and the latest, others may need to check against every schema.\n\n\nThoughts?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-05T01:00:27.690+0000","updated":"2012-09-05T01:00:27.690+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13448436","id":"13448436","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Yeah it definitely makes sense to split the packages up to help with dependencies, your proposal sounds good.\n\nFor the id generation, I think you can use a long even if it is stored as a string. I think in this case String is just a stand-in for \"some bytes\". The id generator i gave uses sequential integers. It just isn't captured in the type signature.\n\nWRT to the API question I think you are proposing adding the source to the API, which is definitely needed in both interfaces for the reasons you give.\n\nI would actually argue for giving the current schema as well, so that it doesn't need to be looked up twice:\n\nvoid validate(String source, String oldSchema, String newSchema);\nvoid nextId(String source, String schema, String currentId); \n\nAlternately we could substitute in a reference to the SchemaRepository from which you could lookup the latest schema/id, the only downside is you would need to do it twice (once in the validator and once in the id generator if you needed both).\n\nOf course if the user provides a custom implementation, all of these can be done in inline in any custom way as part of the register() call.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-05T03:44:57.403+0000","updated":"2012-09-05T03:44:57.403+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13449287","id":"13449287","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Rather than supplying a SchemaRepository in the API for a generator or validator to use, the repository can be provided when the generator is constructed if it needs it. This however creates a circular dependency -- a repository requires a generator which requires a repository.  To decouple this, we can build it up by layers.  For example, a ValidatingRepository is created by combining a Validator and Respository.  A CachingRepository is created by combining a Cache and a Repository, etc.  This further decouples the system, allowing for any combination of features to be configuration driven and each layer to be tested in isolation.\n\nFor the ID generator, neither a postgres id generator, HBase id generator, zookeeper generator, nor hash generator needs to know the prior id.  MySQL might (does it not have sequences? Its been a while since I used it).  Anything that does can look it up -- it is likely cached or very fast to retrieve, and id generation will be infrequent.\n\nFor the validator, do we assume that we are only validating the new versus the current?  What if a validator needs to compare the new schema to all previous to ensure forwards compatibility?  The simplest API would appear to be:\n\nvalidate(String source, String newSchema);\n\nAll other context, such as checking against the latest version, can be encapsulated in the validator instance and passed in its constructor.  We could have an abstract validator that implements the above, gets the latest, and then has an abstract\n\nvalidate(String source, Sring newSchema, String latestSchema);\n\nresulting in the more limited API you list above.  Doing the reverse however, would create a wasted lookup for validators that do not require it.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-06T00:07:28.555+0000","updated":"2012-09-06T00:07:28.555+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13503967","id":"13503967","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"I am nearing completion on the first patch attempt for this ticket.\n\nThe implementation differs from Jay's first pass in several ways, but has the same core concept.\n* The \"group\" or \"source\" concept has been renamed \"Subject\" -- this is a collection of mutually compatible schemas, evolved over time according to a specific notion of compatibility.  I am happy to pick another name if that makes sense.  \"Group\" is too broad, \"Topic\" is taken by pub-sub systems and does not map 1:1 to that (though often does), and our engineers found \"source\" confusing.\n* The client API attains a _Subject_ from a _Repository_ and does Schema/Id lookups on this _Subject_ object, not the repository.  Since many common use cases of the repository map to one _Subject_ (e.g. a collection of Avro files, a column in HBase, or a Topic in Kafka all map to one Subject), it was cleaner as a client to bind the Subject to the object in the client in code (perhaps as a final member variable) than to hold on to the Repository object and _always_ pass in the same constant subject name. \n* The client API is the same as the server implementation API.  To implement a JDBC or HBase persistent store, implement Repository and Subject.   This allows composition of layers and proxy implementations.  For example, a a persistent Repository implementation can be wrapped in a CachingRepository, much like an InputStream can be wrapped in a BufferedInputStream.  One of our critical use cases leverages this -- a repository proxy is constructed as a REST server that uses the REST client as a backing store, with a cache layer in the middle.\n* Validation is not yet implemented (working on it, some parts are stubbed out).  There are at least 5 basic notions of 'compatibility' that I believe should be built-in, see the Javadoc.  Validation and  compatibility need to be configurable on a per-Subject basis.\n* Caches are pluggable and composible with storage implementations.\n* I did not implement a MySQL or JDBC storage layer (we use Postgres, if we build that we will contribute).  Instead I wrote a simple file based repository as one of two reference implementations.  The other reference implementation is an in memory repository.\n* I modified the REST semantics a bit, which required a \"register_if_latest\" variant of register to avoid race conditions when two registrations occur at the same time and validation would fail if it is order dependent.\n* The eventual implementation needs to support both integer and string IDs.  The current implementation leaves this up to the persistence layer, but we need to expose on a per-subject basis whether a key can be interpreted as an Integer or not.\n\nOpen questions:\n* What should the restrictions be on Subject names?  I propose that subject names are required to be valid Avro identifiers: http://avro.apache.org/docs/current/spec.html#Names (e.g. com.richrelevance.Stuff_Number-2 is valid, but 34;'xyz is not) this should mean that the names are valid file/directory names but that some escaping may be needed to map to a table or column name in an RDBMS due to '.'\n* Is there a cleaner way to deal with validation race conditions in the API?\n* This model has been proven to work and tested at RichRelevance internally when paired with Kafka and/or collections of Avro files.  I have not deeply considered HBase/Cassandra/Hive/Pig etc yet.  I believe the concept works broadly for any case where you want to encode a short ID prefix instead of full schema before a record.\n* Rather than have named parameters in the API (REST and Java) specifically for the type of validation, I think it is wiser to have an arbitrary Map<String, String> for each subject for extensible configuration.  We can reserve the \"avro.\" prefix namespace for internal use.\n\nOther tidbits:\n* The entire repository core does not depend on Avro at all -- it is a system for mapping a namespace of (subject_name + id) to a schema string.  The only requirement is that the string not be empty.   Avro (or other interpretations of the schema) is a separate concern handled in a different layer.\n* I have added JSR-330 annotations for some constructor Injection, and use Guice in the server component to wire it all up and launch flexibly -- the persistence implementation and cache can be configured in a properties file and a server launched.  Guice does _not_ leak to any client libraries, it is only for the stand-alone server.  Clients can optionally include a jsr-330 jar for use with Spring/Guice or ignore them.\n* Client libraries for reading/writing (id:avro_bytes) pairs with Avro and caching the avro machinery appropriately are additional things I would like to later contribute.\n\n\nWe have started using the implementation internally and will migrate to the eventual version submitted to Apache Avro.  I am targeting end of year to wrap this up.\n\nI will post the work in progress to this ticket.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-11-26T18:30:25.854+0000","updated":"2012-11-26T18:30:25.854+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13503970","id":"13503970","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"To be clear, I am targeting today or tomorrow for the first patch and work in progress, and later this year to finish review and get community consensus for commit with all open questions addressed and no missing features.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-11-26T18:35:37.559+0000","updated":"2012-11-26T18:35:37.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13504295","id":"13504295","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Work in progress for Schema Repo attached as AVRO-1124.patch","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-11-27T01:32:54.389+0000","updated":"2012-11-27T01:33:22.008+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13563775","id":"13563775","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"I have a question, mainly for the LinkedIn folks, but anyone's welcome to give their opinion of course :)\n\nHow do you deal with nested schemas? In particular, how do you deal with nested schemas that are defined externally and imported into the containing schema?\n\nhttp://avro.apache.org/docs/current/idl.html#imports\n\nDo you version them somehow? If so, how? Do you tag them with a custom metadata field containing the version/ID of the nested schema? Do you instead always flatten the nested schemas into the containing schema instead of importing them from the outside?\n\nIf there is no current support for versioning externally defined imported schemas, then is it something that's worth supporting? or should it instead be enforced to only have flattened schemas and not use imported ones?\n\n(By flattening, I do not mean to remove the nesting, but rather to include the definition of the nested schema directly in the containing schema's definition, rather than importing it.)\n\nAlso, if a metadata field is defined which contains the version of a nested externally defined schema, then should the value of this metadata field be included in the schema fingerprinting algorithm?\n\nThanks :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-27T10:20:06.493+0000","updated":"2013-01-27T10:20:06.493+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13564387","id":"13564387","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"body":"Our setup works as follows:\n1. We have a giant directory of version controlled schemas for the whole company. We have another directory called \"includes\" which includes any shared record type that is included in multiple schemas.\n2. We always fully expand referenced types in the schemas. So if you have a type Header defined in your record and it is not found in that same file, we look in the includes directory and try to get it from there.\n3. We don't use the idl since our setup predates that.\n4. We send each message with a schema id which is the checksum of the fully expanded schema.\n5. This means that any change to either the record or any includes effectively changes the version, but this is fine, since version changes are automatically handle when the md5 of the fully expanded schema changes.\n\nThis approach has worked really well for us. The way to think about includes is just as a concise notation for the fully expanded schema.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-28T16:32:04.546+0000","updated":"2013-01-28T16:32:04.546+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13564479","id":"13564479","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Here at RichRelevance we do something extremely similar to LinkedIn, but use incrementing integer IDs rather than md5s.\nThe number of total schemas is not likely to be so high that holding references to nested versioned bits is worth the added complexity.  It has been claimed that Google's internal schema repository for protobuf is on the order of 10K schemas including all versions.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-01-28T18:18:22.149+0000","updated":"2013-01-28T18:18:22.149+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13564599","id":"13564599","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"body":"With HAvroBase I started out using SHAs but ultimately switched to a monotonically increasing number and look them up with their text value. As long as you have a central repository either one will work with similar performance characteristics but having a single integer is just simpler.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"created":"2013-01-28T19:44:55.471+0000","updated":"2013-01-28T19:44:55.471+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13606709","id":"13606709","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"body":"Have there been any more talks on a potential release for the schema repository?  We are definitely interested in this feature and are considering implementing a JDBC based repository.  Before doing so we wanted to check on the status as I see that Postgres and MySQL implementations have already been mentioned.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"created":"2013-03-19T19:47:08.819+0000","updated":"2013-03-19T19:47:08.819+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13607122","id":"13607122","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"After some time off working on other priorities, I have returned to work on this.  We have been running a version of this internally for ~4 months (not too different than the November patch).  It is missing a few key features I am adding now to make subject configuration flexible and allow for configuration of custom or built-in validation rules.\n\nI will be updating this ticket with my latest work this week, and plan to push it to completion/contribution this month.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-03-20T00:50:02.146+0000","updated":"2013-03-20T00:50:02.146+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13607126","id":"13607126","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"body":"Wow that's service!  Thanks for the very welcomed contribution!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"created":"2013-03-20T00:53:35.473+0000","updated":"2013-03-20T00:53:35.473+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13617384","id":"13617384","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"body":"@Scott, I wanted to follow up on your patch.  I am still new to this process, will it be applied under AVRO-1124 or another one?  I don't mean to rush you at all.  I just want to make sure I am looking in the right place.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"created":"2013-03-29T14:40:43.340+0000","updated":"2013-03-29T14:40:43.340+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13617484","id":"13617484","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"You are looking in the right place.  I'll post the patch here and it will be against trunk at the time.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-03-29T16:26:33.345+0000","updated":"2013-03-29T16:26:33.345+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13617489","id":"13617489","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Current progress -- I have added a generic way to set / store configurations per subject, and reserved configuration keys starting with \"repo.\".   I'm in progress of wiring up the process of identifying validators based on the configuration.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-03-29T16:30:22.856+0000","updated":"2013-03-29T16:30:22.856+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13617937","id":"13617937","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"body":"That's great! Thanks for the update. Will this patch include a Postgres Repository implementation as well?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=hodgesz","name":"hodgesz","key":"hodgesz","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Hodges","active":true,"timeZone":"America/Denver"},"created":"2013-03-30T01:10:00.908+0000","updated":"2013-03-30T01:10:00.908+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13618657","id":"13618657","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"No, we are currently using a boring (and not horizontally scalable) file based repository that will be included since it depends on nothing outside of the Java 6 JDK.  An HBase one may follow that.  I am also including generic unit testing tools for testing any repository implementation in a unit test maven artifact.\n\nDatabase implementations should be easy.  I suspect that Postgres and MySQL will probably end up with differing implementations sharing some common code, due to differing feature sets underneath.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T06:42:03.902+0000","updated":"2013-04-01T06:42:03.902+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13619272","id":"13619272","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Most recent patch for the schema repository.  \n\nThis is very close, and supports configurable validators, repository implementations, and caching.\n\nWhat is missing:\n* One more maven module for Avro specific components and validators.  None of the core code here depends on Avro specifically.\n* We need to decide what is allowed in a schema, currently a schema containing a newline will break the schema listing.\n* Another pass through the javadoc.  I have not reviewed changes to the documentation needed due to my recent changes.\n* Wiki or other external documentation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T22:52:06.145+0000","updated":"2013-04-01T22:52:06.145+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13619339","id":"13619339","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Some changes in the last patch:\n\nThere is now a SubjectConfig class paired with a Builder.  This is serialized as a Map<String,String> in the format of java.util.Properties.  Keys that start with \"repo.\" are reserved.  \"repo.validators\" stores a comma separated list of validator names.  Validator names can be anything that does not contain a comma or have leading or trailing whitespace.\n\nA repository REST server can be started up with a configuration property file that contains the HTTP configuration, implementation of the repository to use, the cache to use, and validator mappings.  All properties in the property file are bound using Google Guice, so additional mappings or configurations can be used by any other repository implementation or cache implementation.  For example, the FileRepository and RESTRepositoryClient repository implementations so far use Guice to inject the repository instance and pass configuration information to their constructor.\nTherefore, it should be possible for alternate repository implementations to back the RESTRespository server provided by setting the implementation classes and their configuration needs in the property file, and placing the required classes in the classpath.\n\nValidator mappings are configured in the property file by prefixing the validator name with \"validator.\" in the property key.\nFor example, a line in the property file:\n\"validator.avro.disallowUnions=org.apache.avro.repo.validators.DisallowUnionValidator\" would bind the name \"avro.disallowUnions\" to the implementation class \"org.apache.avro.repo.validators.DisallowUnionValidator\", and any Subjects configured with that validator name would use that class to validate schemas.\n\nSubject configuration is currently set once at subject creation time, and if there is a race condition when creating subjects, the first one wins.  I have not added the ability to set validation configuration via the Repository/Subject API yet, or built the REST API for that.  At this time, if one wants to modify the subject configuration they will need to do so through a back-door such as modifying the files on disk for the file repo, or a database record in another store.\n\n\nLastly, I added a method to a Subject: \"boolean integralKeys()\" to indicate whether the keys generated by this subject can be expected to parse as an integer.  This delegates all the way through to the backing store and is not configurable through the Repository/Subject API, since implementations of the backing store are what determines how keys are generated; the contract otherwise is merely that they are Strings and unique per subject.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T23:46:45.641+0000","updated":"2013-04-01T23:46:45.641+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13619346","id":"13619346","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"To help disambiguate where Properties are used more clearly:\n\nThere is a set of properties used by o.a.a.repo.server.ConfigModule that is application scope, and required for the o.a.a.repo.server.RepoServer.main() to run.  This contains the Jetty, repo, cache, and validator configuration information that is related to the Guice-based application initialization and configuration.\n\nProperties is also used as a mechanism to serialize data in a SubjectConfig in the FileRepository implementation, but conceptually SubjectConfig contains a Map<String,String> that implementations of persistent stores must maintain per Subject.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T23:53:01.888+0000","updated":"2013-04-01T23:53:01.888+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13619564","id":"13619564","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"A little wrinkle.  I've built Avro validators for the before mentioned backwards and forwards compatibility modes.  However, there is no facility in core Avro to ask \"can I read schema X with schema Y\"?  I thought that ResolvingGrammarGenerator.generate(writer, reader) would do so, but it is lazy and only breaks when one attempts to read data (at least for missing fields without defaults.\n\nI've written a method on Symbol that seems to work to check the result of ResolvingGrammarGenerator.generate(writer, reader) to see if it contains errors, and will include this shortly, but it is poorly tested at the moment.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-02T06:47:20.311+0000","updated":"2013-04-02T06:47:20.311+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13623889","id":"13623889","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"An in-progress patch of the avro validators and some tagged writing facilities.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:18:05.611+0000","updated":"2013-04-05T18:18:05.611+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13623896","id":"13623896","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"My current approach to the validators is in the most recent patch (plus in progress work on writing avro messages tagged with an id prefix to a byte[]).\n\nOn the validators, I am relativelly happy with them, but I have modified other code to do the \"Can I read Schema X with Schema Y\" work, and that is not well tested and based on an assumption of how the ResolvingGrammarGenerator works.\n\nWe may want to move that portion of the work into another ticket and commit it first.  I'll attach one more patch with the work I did to support this.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:21:35.896+0000","updated":"2013-04-05T18:21:35.896+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13623900","id":"13623900","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"This patch adds \n{code} \npublic static boolean hasErrors(Symbol symbol) \n{code}\nto Symbol.java.  This seems to work but this may not be the best place for this code.  It re-uses the ResolvingGrammarGenerator but perhaps instead we could make a version of that that fails fast rather than inserting error symbols.  Lazy errors are nice in case your data doesn't trigger them, but in this case we want to know if there are any errors possible.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:26:20.793+0000","updated":"2013-04-05T18:26:20.793+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13637642","id":"13637642","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"body":"Hey Scott,\n\nThis patch is very promising. I believe I can fairly quickly provide an HBase storage, based on what we already have in Kiji.\nI have a few questions below.\n\n - It seems to me that validators should not be tied to the repository server.\n   I may want to use validators in a different context.\n   Could they be introduced independently in a separate change?\n\n - Can I add metadata to the schema entries?\n   I'd need this to add a custom ID for a schema (I assume the existing schema entry ID is opaque and not to be interpreted).\n   I might want to keep track of when the schema was added and by who, etc.\n\n - A Subject is currently a monotonically increasing ordered list of schemas.\n   In some circumstances, I may want to remove a schema from a subject.\n\n - Can I change the validator of a subject (eg. to relax/tighten the constraints on a subject)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-21T20:40:32.397+0000","updated":"2013-04-21T20:40:32.397+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13638447","id":"13638447","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"* Validators outside of the repository.  I agree, I'll look at how we can separate them out.  There are a few parts to them -- the pure string validators that are tied to the repository and the Avro logic for representing various forms of validation.  I'll think about how to separate the avro logic to be more consumable outside the repository.\n\n* Schema entry metadata -- I had not thought of this.  It poses some challenges and questions.  Is it immutable?  Is the metadata essentially another Map<String, String> or more complicated?  Immutable data can be cached, but must be set when the schema is registered.  That opens up other issues related to race conditions on registration or modification.\n\n* Removing a Schema -- this introduces major issues with caching.  How would one signal to all clients that a schema has been removed?  Or is it ok if clients have an old mapping?  If these are expected to be very rare, I suggest that they are handled not by the Repository API but by an individual implementation (e.g. Postgres, HBase, File) and require a restart of clients.    If it is OK that clients cache old entries, then it may work out OK in the API as long as the back-end repositories 'tombstone' the ID to prevent it from getting reassigned to a new schema.\n\n* Changing the validator of a subject is something we should support.  Only the back-end 'physical' implementations of the repository actually validate, the others delegate.  As long as there is not an attempt to apply validation at an intermediate level this should be safe.  One question related to this:  do we want to attempt to run the new validator on the existing schemas (in order) or only apply it to future attempts to add schemas to a subject?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-22T21:27:16.772+0000","updated":"2013-04-22T21:27:16.772+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13646008","id":"13646008","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"body":"* schema entry metadata: what you suggest seems appropriate, I believe an immutable Map<String,String> is good enough; mutable data associated with a schema should probably be handled externally.\n* removing a schema: subjects are mutable, as monotonically growing lists of schemas. Does the caching layer already handle such subject updates?\n* updating the validator: it feels to me that the validator should always successfully run on the existing list of schemas in a subject. If the validator is \"last 3 schemas must be backward and forward compatible\", as a user of the subject, I may assume the currently existing last 3 schemas are backward and forward compatible. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-30T21:31:12.640+0000","updated":"2013-04-30T21:31:12.640+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13646203","id":"13646203","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"* schema metadata:  There is one race condition to consider -- currently subject.register(foo) is idempotent and also never fails unless there is a schema validation failure. Two users simultaneously registering the same schema end up with the same schema/id pair -- both fail or both succeed and get the same result.  If we tag metadata along with it, then two concurrent registrations with the same schema but different metadata might occur.  The actions are still idempotent and the two users get the same result, but only one will have the metadata expected set.  I will still have register() never fail outside of validation, but the schema metadata is not guaranteed to be what the user requested when there is a race condition -- the same thing happens with subject creation now.  If metadata is immutable, it can be cached and part of the SchemaEntry.  If it is not, it will need to be uncached or have a TTL, the latter I would like to avoid due to complexity. \n\n* In a subject, schema/id pairs are only added.   The caching layer is free to assume that once an id/schema relation exists, it will forever, there is no propagation of updates.  This is the sane thing to do -- once a datum has been written with an id, the schema tied to that key should be kept forever.  If a schema could be removed, we would need to check the repository for every record or have a TTL in the cache.   It would be easier to support 'deactivating' a schema/id pair so that it is not returned when scanning all the active schemas in a subject, or with validation, but can still be found by looking it up.   Can you describe the use case for deleting a schema?  Under what conditions would you want to do so?\n\n* I have opened https://issues.apache.org/jira/browse/AVRO-1315 to cover the avro schema validation components that live outside of the repo projects.  Please provide feedback, Thanks!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-05-01T00:22:03.512+0000","updated":"2013-05-01T00:22:03.512+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13647176","id":"13647176","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"body":"* schema metadata: I believe the race condition is avoidable if I use registerIfLatest(). Am I correct here?\n* deleting a schema from a subject: the use-case is, I want to enforce some level of compatibility on all the schemas in a subject; at some point I realize one schema in the subject prevents me from moving forward in a sane way; I don't want to relax the compatibility constraint, but I am willing to actively deprecated this one schema (eg. by rewriting the records according to another schema from the subject), so that I can exclude this schema from the validation. The schema does not necessarily need to disappear from the subject, it may stay there, but I want to exclude it from the validation check. Does this make sense?\n* AVRO-1315: awesome, I'll check this tonight or tomorrow!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-05-02T01:42:37.920+0000","updated":"2013-05-02T01:42:37.920+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13742372","id":"13742372","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"body":"Is anyone still pushing on this one?\n\nOne question for those using incremental IDs.  Do you ever move serialized data from one environment to another, and if so do those environments each have their own schema registry or is there a shared one?  It seems if each environment has its own schema registry then data may not be portable if the assigned ID sequence was not identical in each environment.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-08-16T16:38:59.368+0000","updated":"2013-08-16T16:38:59.368+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13742596","id":"13742596","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Yes.  I have quite a bit of work outstanding on this to finish and submit for review.  But I'll be on vacation for 2 weeks.\n\nRe: Incremental ids:\n\nThe ids don't have to be incremental, that is an option that is up to the repository implementation.  They can also be an arbitrary string.\n\nYour repositories probably will not map directly to environments, but to the data.  If you are sharing data across environments, you will share repositories (or clone them) with the data.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-08-16T20:57:00.337+0000","updated":"2013-08-16T20:57:00.337+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13742619","id":"13742619","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"body":"Thanks for the update, Scott.  I'm excited to see this work get in, it looks great.\n\nI realize the IDs are pluggable, but I would love to avoid 8 byte+ overhead, especially for small records, so I was considering the incrementing IDs.  However, this portability issue occurred to me so I was curious to hear if those already using an incremental ID had dealt with it.\n\nWe envision having a schema registry running in each environment alongside the other services we provide there.  I.e. one in production, one in staging, one in each development or integration environment.  Then the applications could talk to the registry in their environment.  I'd be nervous having a shared service that production, staging, integration and development environments are all using.\n\n{quote} If you are sharing data across environments, you will share repositories (or clone them) with the data.{quote}\nThat sounds reasonable, unless you're adding data to an environment that has already mapped the same IDs to different versions of the schema.\n\nWhat about another possibility of having a schema ID directly as a metadata entry in the schema?  Then perhaps the build system could be increment it whenever the schema is revved.  ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-08-16T21:33:29.534+0000","updated":"2013-08-16T21:33:29.534+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13742628","id":"13742628","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"Schema id generation pluggable, so there are many options.  The _only_ requirement is that within a subject ids are unique and correspond to unique schemas.\n\nWe also have staging/prod/qa/dev environments.  There is a repo for each, but when qa gets its data snapshot from prod, we also clone the repo.  \n\nFor dev/staging, we have a kafka mirror that is exactly the production data.  Both of these environments access the prod repo read-only.  In fact, even in production, most subjects are read-only to all applications.  Operations has to add a new schemas for a release.  This is akin to operations executing SQL scripts to do DDL prior to a code push.  Having applicaitons 'automagically' update sql schemas or push avro schemas can lead to accidents, unless the security model is implemented properly.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-08-16T21:42:25.854+0000","updated":"2013-08-16T21:43:04.972+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13779650","id":"13779650","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Scott,\n\nA little bump for this ticket :)\n\nI've been able to apply the April 1st 2013 patch on top of the 1.7.5 avro release after doing some minor tweaks. I've then been able to get the shaded jar located at bundle/target/avro-repo-bundle-1.7.5-withdeps.jar running.\n\nI'm wondering if I should also apply the two April 5th patches, and possibly the AVRO-1315 patch as well, on top of all that? It'd be nice to get this committed into trunk (or into a development branch) sooner than later, like Doug initially suggested, so we don't have to mess around with several patch files which end up breaking on the tip of the trunk as avro releases move forward.\n\nI'll be looking into integrating the usage of the schema repo into our various Kafka publishers and consumers over the next little while. I'd be curious to know how stable you think the current API is?\n\nThanks :) !","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-09-27T04:29:01.111+0000","updated":"2013-09-27T04:29:01.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13802379","id":"13802379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"body":"[~felixgv] Mind sharing your tweaks or updates?  I'm also looking to get this available, even if it doesn't have the automatic validation yet.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=davelatham","name":"davelatham","key":"davelatham","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Dave Latham","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-10-22T22:48:35.426+0000","updated":"2013-10-22T22:48:35.426+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13827415","id":"13827415","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"body":"All:\nI apologize for the long delay.  \n\nWhat we have used in production for about a year is very close to what has been in this ticket the whole time.  I have never considered it complete for a few reasons.\n\nI have been \"close\" to done with this for some time now but swamped by other responsibilities and what is currently in use has been good enough for now, but it won't be for long.   \nThe latest changes however, would significantly impact some of the API with respect to how the schema repo manages validation and compatibility.  This would be significantly more flexible for interfacing with other systems.\n\nIt boils down to the following observation:\n\nIt appears that all notions of schema compatibility share a common form.  The previously discussed \"forwards compatible\" or \"N + 1\" compatibility are all flavors of the same set of constraints. \n\nIn any set of schemas you wish to consider for compatibility (a \"Subject\" here), at any given time you have a subset of these schemas that you wish to be able to read with, a subset you must be able to read from.  You may have some that you neither wish to read from or write to but must keep the mapping of the id.\n\nThe way to represent this is to have a \"read\" state  and a \"write\" state per schema in the subject.\nThe read state has two possible values, naming help needed:   \"reader\", \"not_readable\" \nThe write state has three possible values, naming help needed:,  \"writer\", \"written\", \"not_writable\"\n\nThe constraint of the system is that all \"reader\" schemas can read all \"writer\" and \"written\" schemas, per subject.  A schema can transition either state, one at a time, leading to pair-wise testing of \"schema X can read Y\":\n *  A schema transition from \"not_readable\" to \"reader\" succeeds only if it can read all schemas that are currently \"writer\" and \"written\".\n *  A schema transition from \"reader\" to \"not_readable\" requires no pairwise schema validation, but some other pluggable validation may apply.\n *  A schema transition from \"not_writable\" to \"writer\" or \"written\" requires pairwise validation that that schema can be ready by all current \"reader\" schemas.\n *  A all other schema write state transitions do not require pair-wise schema validation, but other pluggable validation may apply.\n\nThe write state has three possibilities because it is important to differentiate between the case where you allow new records of this type to be written (\"writer\") from one where you wish no new records to be written, but the data store still has values with the schema present (\"written\"). \n\nEvery compatibility scheme can fit in the above.  Single-reader, multiple writer.   Single writer, multiple reader.    N+-1 compatibility.  Full cross-compatibility.   The above is significantly more flexible than the early proposals on this topic, but will require changes to the REST interface.   Loading data from the old, into the new, will be fairly simple however -- some curl commands and bash scripts will do it.\n \n\n, and enforce the constraint that all schemas that have their \"can read with\" state set must be able to read all schemas that have their write state in \"can write with\" or \"must be able to read\"\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-11-20T07:49:26.218+0000","updated":"2013-11-20T07:49:26.218+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13868292","id":"13868292","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herriojr","name":"herriojr","key":"herriojr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Herriott","active":true,"timeZone":"America/Los_Angeles"},"body":"Maybe I am missing something, but stated in the original ticket it read that the RepositoryServer should be load balanced.  The thing that appears to be an issue for me, but maybe I have a misunderstanding, is that each Producer must register the schemas it is using with the SchemaRepository.  If this is true, and the RepositoryServer is load balanced, it means schema IDs will slowly diverge between RepositoryServers if an increment count is used for IDs.  This issue is solved with MD5s, which is what you stated as being done at LinkedIn.\n\nAnother issue I foresee is if load balanced, and that particular schema only got registered with one instance of the RepositoryServer but not with another instance, and the Consumer asks the server it hasn't been registered with, then it will fail.  How do you guys manage or mitigate these risks?  Do you first run something to register schemas with all RepositoryServers?  Does the job just get processed again and *hope* that it doesn't hit the same RepositoryServer again?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herriojr","name":"herriojr","key":"herriojr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Herriott","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-01-10T21:00:42.071+0000","updated":"2014-01-10T21:00:42.071+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13868379","id":"13868379","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herriojr","name":"herriojr","key":"herriojr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Herriott","active":true,"timeZone":"America/Los_Angeles"},"body":"Ah, I missed the part about the pluggable key value store, so the onus is put on another technology to handle the consistency and the Repository just needs to handle the distribution.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=herriojr","name":"herriojr","key":"herriojr","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jonathan Herriott","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-01-10T22:07:32.654+0000","updated":"2014-01-10T22:07:32.654+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13887542","id":"13887542","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Getting back into this after getting pulled into other projects for a while...\n\n[~davelatham], I imagine you probably figured this out on your own by now (sorry for not replying earlier), but in case it can help you or anyone else, here's a GitHub repo containing the release of Avro 1.7.5 with the 01/Apr/13 patch applied onto it and small tweaks so that the build works: https://github.com/mate1/avro/tree/release-1.7.5-with-AVRO-1124\n\nTo everyone else, I'd like to get your thoughts on something.\n\nThere are certain avro schemas that we use across many Kafka topics (1:M relationship between schema and topics). I would like to benefit from the facilitated evolution capabilities of the schema repo, but I'm not 100% sure of the best way to proceed. I would like to avoid:\n\n1. Having to register the same schema (and each further schema evolutions) into many subjects.\n2. Having to externally manage a mapping of \"Kafka topic\" => \"subject registered into the repo\".\n\nI have considered prefixing each of my Kafka message payloads with not just the writer's schema ID, but also a subject ID, but I have though of many caveats to this approach, which are probably not worth enumerating here, for the sake of brevity.\n\nAnother possibility would be to introduce the concept of a SubjectAlias. The way it would work is that you would register a SubjectAlias with an aliasName and a targetName. If the aliasName already exists, or if the targetName does not exist, the operation would fail. Afterwards, any lookup for the aliasName would return a DelegatingSubject containing the Subject referenced by the targetName of the alias that was looked up.\n\nThis change seems clean and not too intrusive, and also wouldn't require encoding both subject ID and schema ID in my message payloads. But perhaps there are problems to this approach that I haven't thought of.\n\nDo you think this approach makes sense? And would it be worth contributing back into the main schema repo code?\n\nIs this (multiple topics sharing a single set of compatible schemas) something that other organizations have had to deal with?\n\nHopefully I've properly explained what I'm trying to achieve. All feedback would be appreciated! Thanks (:","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-01-31T07:19:29.858+0000","updated":"2014-01-31T07:19:29.858+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/13931061","id":"13931061","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi everyone,\n\nIntegrating this schema repo in our stack has been a back-burner project of mine for a while now, so I haven't been able to make progress as fast as I wanted. Anyway, I finally found some time to get back into it again.\n\nI have a question: Why is this project completely serialization-agnostic? I understand that there is value in having a general solution, but it seems like it would be useful to have a standard Avro-specific implementation, at least on the client-side. Basically, something like what Camus is doing here:\n\nhttps://github.com/linkedin/camus/blob/master/camus-schema-registry-avro/src/main/java/com/linkedin/camus/schemaregistry/AvroRestSchemaRegistry.java\n\nhttps://github.com/linkedin/camus/blob/master/camus-api/src/main/java/com/linkedin/camus/schemaregistry/SchemaRegistry.java?source=c\n\nIt's very simple, but it seems like the type of stuff that every project would need to re-implement on their own. Of course, you could use the schema repo code provided here as is if you're okay with re-parsing the Avro Schema on every invocation of the repository, but that seems pretty wasteful, especially in high-throughput environments...\n\nWould there be any desire to integrate this kind of Avro-specific wrapper for the caching client implementation?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-03-11T22:24:47.466+0000","updated":"2014-03-11T22:24:47.466+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14025652","id":"14025652","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=flangelier","name":"flangelier","key":"flangelier","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=flangelier&avatarId=19884","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=flangelier&avatarId=19884","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=flangelier&avatarId=19884","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=flangelier&avatarId=19884"},"displayName":"Francois Langelier","active":true,"timeZone":"America/New_York"},"body":"Hi guys!\n\nIf I want to use the repository, what patches are useful?\n1--> AVRO-1124.patch 01/Apr/13 18:52 \n2--> AVRO-1124.patch 26/Nov/12 20:32\n3--> AVRO-1124-can-read-with.patch 05/Apr/13 14:26\n4--> AVRO-1124-draft.patch 31/Aug/12 20:00\n5--> AVRO-1124-validators-preliminary.patch 05/Apr/13 14:18\n\nFrom what I understand, \n    1 is the newest version of 2, so 2 is useless/deprecated? \n    3 is also in AVRO-1315 so useless too since I'm using AVRO-1315\n    4 is a draft(?) so deprecated too?\n    5 is some validators so that one is useful?\n\nSo I should need 1, 5 and AVRO-1315??\n\nThank for your help!\n    ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=flangelier","name":"flangelier","key":"flangelier","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=flangelier&avatarId=19884","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=flangelier&avatarId=19884","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=flangelier&avatarId=19884","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=flangelier&avatarId=19884"},"displayName":"Francois Langelier","active":true,"timeZone":"America/New_York"},"created":"2014-06-09T19:54:17.630+0000","updated":"2014-06-09T19:54:17.630+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14043745","id":"14043745","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thunderstumpges","name":"thunderstumpges","key":"thunderstumpges","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thunder Stumpges","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Francois, I noticed you applied these patches, and the code tweaks from Felix in mate1/release-1.7.5-with-AVRO-1124. I was able to pull and build it perfectly. Thanks a lot!\n\nFor others, here's the branch from trunk with patches for both AVRO-1315 and AVRO-1124 applied:\nhttps://github.com/mate1/avro/tree/from-98ec5f2a172391cb5dfa7b4d85f39065bae22754-with-AVRO-1315-and-AVRO-1124\n\nBTW, are we expecting AVRO-1124 to end up in an 'official' AVRO release or will this constantly be an open issue with a set of patches? I don't necessarily mind this way; we have figured it out and gotten it working. I'm just curious what the end plan is for it. I'd be glad to help out in whatever way I can.\n\nThanks again everyone.\nThunder\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thunderstumpges","name":"thunderstumpges","key":"thunderstumpges","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thunder Stumpges","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-06-25T17:00:04.387+0000","updated":"2014-06-25T17:00:04.387+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14043777","id":"14043777","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thunderstumpges","name":"thunderstumpges","key":"thunderstumpges","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thunder Stumpges","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Felix, was just reading through comments, and saw this from you. We are going through the exact same thing right now as well.\n{quote}\nThere are certain avro schemas that we use across many Kafka topics (1:M relationship between schema and topics). I would like to benefit from the facilitated evolution capabilities of the schema repo, but I'm not 100% sure of the best way to proceed. I would like to avoid:\n1. Having to register the same schema (and each further schema evolutions) into many subjects.\n2. Having to externally manage a mapping of \"Kafka topic\" => \"subject registered into the repo\".\n{quote}\n\nWe also are trying to avoid this. We are currently planning to take a topic naming convention approach where we combine the subject name (avro class FQN) with a \"topic suffix\" when naming our topic. So a topic would be named: '<subject_name>--<topic_suffix>' where we don't use the -- delimeter in either subject name or suffix. I think this avoids both of the above issues, as well as not requiring each message to have a subject ID. It does however add complexity to all consumers on how to \"parse\" topic names.\n\n{quote}\nAnother possibility would be to introduce the concept of a SubjectAlias. The way it would work is that you would register a SubjectAlias with an aliasName and a targetName. If the aliasName already exists, or if the targetName does not exist, the operation would fail. Afterwards, any lookup for the aliasName would return a DelegatingSubject containing the Subject referenced by the targetName of the alias that was looked up.\nThis change seems clean and not too intrusive, and also wouldn't require encoding both subject ID and schema ID in my message payloads. But perhaps there are problems to this approach that I haven't thought of.\nDo you think this approach makes sense? And would it be worth contributing back into the main schema repo code?\n{quote}\n\nI think this would be a fine approach, and that would simplify our kafka consumers to not need to \"understand\" the convention we came up with. It would also free you to use any convenient topic name for any subject schema without having to adhere to that convention on naming. \nHave you had any progress or other thoughts on this issue since January? I realize I'm a little late to the party :)\n\nCheers,\nThunder\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thunderstumpges","name":"thunderstumpges","key":"thunderstumpges","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thunder Stumpges","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-06-25T17:21:38.210+0000","updated":"2014-06-25T17:21:38.210+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14043801","id":"14043801","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Thunder,\n\nDisclaimer: I don't work for Mate1 anymore, so what I'm going to say might be out of date by now. The Mate1 guys will need to chime in for the latest state of their work on this...\n\nI did not end up coding SubjectAliases into Avro proper because there didn't seem to be any interest from the OSS community and I had limited time to build this completely generically.\n\nMate1 had a strategy that is kind of similar to the one you're describing. We had arbitrary topic names, which could be dynamically appended with certain suffixes (like \"__PROCESSING_FAILURE\", \"__DECODING_FAILURE\" or whatever). Those dynamically created topics could then be re-processed later on, as convenient, and would contain the same schema as the topic they derived from.\n\nIn our Camus decoders, we hard-coded some topic alias resolution right there in the code (since the amount of suffixes was limited in our case). There were talks of porting that topic alias resolution logic to our schema-repo-client implementation ( https://github.com/mate1/schema-repo-client/ ), so that it is more conveniently available to all Kafka consumers (not just Camus), but that didn't end up happening before I left. So essentially, we went for option 2, above. For an organization that has more numerous/diverse suffixes, that strategy would probably not be ideal, but for small amounts of suffixes (or prefixes), it was deemed acceptable.\n\nHopefully, that sheds some light (:\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-06-25T17:40:28.718+0000","updated":"2014-06-25T17:40:28.718+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14044190","id":"14044190","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"body":"> BTW, are we expecting AVRO-1124 to end up in an 'official' AVRO release or will this constantly be an open issue with a set of patches?\n\nI'd love to see this in a release sooner rather than later.  Since it's new functionality there should be no compatibility issues.  All it takes is someone to declare a particular patch ready to be committed, and for one or more other folks to endorse that.  We also need to have some confidence that, even if it's incomplete, the public APIs it exposes can be supported compatibly as functionality is improved.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=cutting","name":"cutting","key":"cutting","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Doug Cutting","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-06-25T23:47:53.194+0000","updated":"2014-06-25T23:47:53.194+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052143","id":"14052143","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"The patch from April 1st (I think its the latest) seems based on Avro 1.7.5, it will need a rebase on Trunk. I think its just a matter of merging pom.xml.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-04T03:59:32.535+0000","updated":"2014-07-04T03:59:32.535+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052149","id":"14052149","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Watch out. The April 1st 2013 patch has a bug in the file-based repo where multi-line schemas get all lines dropped beyond the first one.\n\nThis bug is fixed (and unit-tested) in the Mate1 GitHub repo posted above, so I'd advise creating the next patch off of that. The pom files probably need to be modified either way.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-04T04:21:24.530+0000","updated":"2014-07-04T04:21:24.530+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052737","id":"14052737","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Felix, thanks for the headsup.\n\nI'm trying to pluck a patch out of the Mate1 repo, but it looks like there's no clean commit of just the Repo patch, its mixed with other stuff?\n\nIf I'm wrong, please tell me which Mate1 commit to use for the diffing. \nOtherwise, I'll rebase the April 1 patch and try to selectively apply later Mate1 fixes on top.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T00:33:52.871+0000","updated":"2014-07-05T00:33:52.871+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052742","id":"14052742","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Felix and others interested. More questions:\n\n1. There was a lot of discussion on the implementation of \"schema includes\" (i.e. imports) within the repo. It looks like it was never implemented. That is, there's nothing here that will support compilation of schemas where I refer to a repo+subject when importing another schema. Correct? am I missing anything?\n\n2. I'd like to rebase and nag everyone for commit, but without the additional validator patch. There was a lot of discussion around validators, it doesn't look like it ever got resolved, and I don't see it as mandatory going forward. \n\nDoes that make sense? Was validation issue actually resolved somewhere and I missed that? Is validation super essential?\n\nIf we decide to go forward with no validation, I'll remove the promise of validation from the registration API. We can always add \"registerWithValidation\" later for those who like safety.\n\n3. Few Jiras will probably need to be opened immediately when committing. The first is to add a user-guide :)\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T01:10:57.197+0000","updated":"2014-07-05T01:10:57.197+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052760","id":"14052760","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Gwen,\n\nI don't think that there is a single commit in the Mate1 GH repo that atomically contains everything we need (if that is even what you're looking for... not 100% sure I understood your request correctly). If you want to rebuild the patched Avro repo yourself, then this is the (atomic) commit that contains the multi-line fix I was talking about: https://github.com/mate1/avro/commit/a3960590177e08b3586584cf288b1d4ba9ca1572\n\nAlternatively, I've put together a branch that contains the very latest trunk (as it was on the GH mirror, a few minutes ago), with the M1 fixes on top: https://github.com/FelixGV/avro/tree/AVRO-1124\n\nFrom that branch, I can create a patch against trunk using `git diff trunk > AVRO-1124.patch` (which results in this: https://gist.github.com/FelixGV/7f0978dfa90fe4430c24 ), but that's not the precise format Apache wants (Apache wants the svn diff...). I don't have time to fiddle with this right now, but maybe you know how to generate the patch properly?\n\nOn to your other points:\n\n1. Imports are not supported. The recommended way of using the repo is to flatten schemas so that nested schemas are completely contained in their parent schemas.\n\n2. I think adding validators later on does not break the contract of the current register APIs. Validators should be pluggable and the register API should be allowed to fail for arbitrary reasons (i.e.: validators could be tied to custom in-house policies for schemas, not just backward/forward compatibility). Validation is important, but I think there is still value in releasing the repo without any built-in validators in the first release.\n\n3. Agreed.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T02:19:48.450+0000","updated":"2014-07-05T02:19:48.450+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14052772","id":"14052772","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Took Felix's gist, applied on clean checkout of Trunk (no conflicts).\nCreated an SVN patch and attaching it here.\n\nI haven't tested functionality yet, except making sure the project still builds and unit tests pass.\n\nHowever, considering that its:\n1) All new code, therefore no risk of regression\n2) There's wide agreement that the API is reasonable (evidenced by the fact that multiple organizations currently using it)\n3) After 2 years of discussing and using the code we haven't found a single reason to make non-compatible API change\n\nI recommend committing it, and continuing the improvements in separate issues.\n\nFelix, please double check that I didn't drop anything on the floor by mistake and do another +1 :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T03:51:50.430+0000","updated":"2014-07-05T03:51:50.430+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053058","id":"14053058","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi Gwen,\n\nYour latest patch looks good to me. I suspect I might not be entitled to say +1, but if I am, then +1.\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-06T07:21:39.897+0000","updated":"2014-07-06T07:21:39.897+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053169","id":"14053169","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"body":"From a brief look, patch looks fine.\nShould we get rid of:\n{code}\n./server/src/main/java/org/apache/avro/repo/server/RepositoryServer.java:88: sleep(3000); //TODO DELETE!!! FOR DEBUG ONLY\n{code}\n\nRegarding new validators :\nFrom what I understand, the interfaces in this patch provide a model where one can validate a sequence (timeline) of Avro schemas.\nDo you think this could later be extended to support a model where a subject manages a set of reader schemas validated against a set of writer schemas instead (with no notion of backward/forward)?\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-06T18:05:15.419+0000","updated":"2014-07-06T18:05:15.419+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053176","id":"14053176","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"LOL, good catch [~kryzthov].\n\nThere's a lot of discussion about different notions of compatibility, but the interface simply requires implementing:\n\n  void validate(String schemaToValidate, Iterable<SchemaEntry> schemasInOrder)\n      throws SchemaValidationException;\n\nThis will allow you to validate a single schema against a set. Validating a set against another set seems like a fairly trivial extension. \nNote that the repository doesn't have a notion of reader schema vs. writer schema. Is this something you need for your use-case?\n\nNote for [~felixgv] and others:\nThe original issue (from Jay Kreps) discusses not just a repository, but supporting the use of repository identifier inside Avro serialization, instead of embedding the entire schema. The goal, as I understood it, was to support smaller objects with less overhead for streaming applications.\nThis patch only provides the repository, but each Avro object will continue to contain the entire schema. \nWe'll probably need another follow up issue for that.\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-06T18:41:55.385+0000","updated":"2014-07-06T18:41:55.385+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053213","id":"14053213","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"body":"Compatibility between readers and writers is something we would indeed benefit from.\n\nA {{Subject}} is currently defined as an ordered collection of mutually compatible Schemas, which is fairly restrictive and does not allow for deprecation/removal of schemas.\nSupporting the reader/writer use-case requires dropping the \"mutually\" : some schemas may only be used for reading purposes, while others are or were used for writing purposes. The reader/writer use-case would also allow the removal of a schema from a Subject.\n\nBy the way, I uploaded the patch on https://reviews.apache.org/r/23293/ if folks want to look at the diff and comment more easily.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=kryzthov","name":"kryzthov","key":"kryzthov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=kryzthov&avatarId=16188","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kryzthov&avatarId=16188","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kryzthov&avatarId=16188","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kryzthov&avatarId=16188"},"displayName":"Christophe Taton","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-06T19:59:29.402+0000","updated":"2014-07-06T19:59:29.402+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053223","id":"14053223","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"[~gwenshap], this patch is not the whole story. It is only the repo server and a basic client to interact with it. What's missing (at least, in open source, as I suspect everyone has their own custom internal implementation of this) is the versioned Avro encoders and decoders that make use of the schema repo under the hood, and provide easy to use APIs for dealing with it properly. I believe this functionality definitely deserves to be open sourced as well, but it could be done as later tickets...\n\n[~kryzthov], I think you're right that the use case you describe doesn't seem well supported at the moment in the current APIs. There are arbitrary key/value pairs that can attached to Subjects via their SubjectConfig (but not to individual SchemaEntries). This MIGHT be usable to maintain a list of deprecated/read-only IDs for a given Subject, in which case the validate function might need to be passed a reference to its Subject/Config. Or perhaps we should add explicit support for it, by adding new (specific or arbitrary) fields in the SchemaEntry class... Do you have a proposal of how the API should be extended to support this use case?\n\nOne thing to keep in mind is that whatever data we choose to add needs to be supported by all Repo implementations (right now there is only file-based and in-memory, but still, it would be good to keep the data structures somewhat simple, so that we can easily add new storage implementations).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-06T20:26:14.388+0000","updated":"2014-07-06T20:26:14.388+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14053685","id":"14053685","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tomwhite","name":"tomwhite","key":"tomwhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas White","active":true,"timeZone":"Europe/London"},"body":"> Was validation issue actually resolved somewhere and I missed that?\n\nYes, it was committed in AVRO-1315. It was split out since it is more general than the repo service. The patch for this issue should be refactored to use those interfaces (should just be a package change).\n\nAlso, I noticed that Gwen's latest patch changes Snappy Java 1.0.5 to 1.0.5-M3, which looks like a mistake (remnant from an earlier patch?).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=tomwhite","name":"tomwhite","key":"tomwhite","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thomas White","active":true,"timeZone":"Europe/London"},"created":"2014-07-07T14:12:46.298+0000","updated":"2014-07-07T14:12:46.298+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14055344","id":"14055344","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Part of the API implemented in Mate1 patch is \"get ID by subject + schema\". Reverse lookup of sorts.\n\nI want to remove support for this API.\n\nReasons:\n* Current implementation does not work\n* I can't figure out why we'll need it\n\nWe can add it later if turns out its actually important.\n\nThoughts?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-08T19:19:41.471+0000","updated":"2014-07-08T19:19:41.471+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14055346","id":"14055346","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Never mind my previous comment. I thought it doesn't work - didn't notice its a POST rather than GET.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-08T19:21:17.511+0000","updated":"2014-07-08T19:21:17.511+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14055363","id":"14055363","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"[~tomwhite] : the milestone snappy version does seem like a mistake.\n\n [~gwenshap] : that API definitely does work, and it's essential when using auto-incremented IDs, rather than schema hashes. You need it to know what ID to encode along with your payload on the publishing side of your pipeline. Schema hashes can instead be inferred, but have other tradeoffs (i.e.: size, collision, obfuscated ordering semantics).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-08T19:30:00.350+0000","updated":"2014-07-08T19:30:00.350+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14055589","id":"14055589","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Question for [~felixgv] or [~scott_carey]:\n\nOne of the APIs implemented is GET {subject}/integralKeys\n\nCan you explain what are the integralKeys? \nI see the setters and getters, but no documentations on how we expect to use them. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-08T22:00:10.302+0000","updated":"2014-07-08T22:00:10.302+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14056354","id":"14056354","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"body":"Attaching patch with correction to issues found by [~kryzthov] (sleep statement left from debugging) and [~tomwhite] (wrong snappy dependency).","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-09T15:39:19.087+0000","updated":"2014-07-09T15:39:19.087+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14056544","id":"14056544","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"[~gwenshap],\n\nRegarding integralKeys, there is an earlier comment from [~scott_carey] in this thread which explains it:\n\n\"Lastly, I added a method to a Subject: \"boolean integralKeys()\" to indicate whether the keys generated by this subject can be expected to parse as an integer. This delegates all the way through to the backing store and is not configurable through the Repository/Subject API, since implementations of the backing store are what determines how keys are generated; the contract otherwise is merely that they are Strings and unique per subject.\"\n\nIt would be good to include this in the javadoc of the Subject abstract class, because there currently seems to be no way of figuring this out from the code.\n\nFor now, all provided Repo implementations are hard-coded to always return true on that function, so it is a bit pointless at the moment, but I think the API makes sense to have (especially in the context of supporting hash schemas for IDs, not just auto-incremented integers). What do you think? Should it be documented and left there, or removed for now?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-09T18:07:11.316+0000","updated":"2014-07-09T18:07:11.316+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14059681","id":"14059681","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"body":"[~gwenshap], there's an unused static import of java.lang.Thread.sleep in schema-repo/server/src/main/java/org/apache/avro/repo/server/RepositoryServer.java that causes the audit check to fail.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"created":"2014-07-12T06:25:34.066+0000","updated":"2014-07-12T06:25:34.066+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14059984","id":"14059984","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"body":"I noticed that all of the Named injection points related to repository implementations are prefixed with \"avro.\" except for REPO_CLASS and REPO_CACHE in server/ConfigModule, was this intentional? The example configuration properties file (bundle/config/config.properties) also refers to them as \"avro.repo.class\" and \"avro.repo.cache\", which causes it to not work.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"created":"2014-07-13T03:38:23.559+0000","updated":"2014-07-13T03:38:23.559+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14127643","id":"14127643","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"Has anyone though about using a maven repo as a avro schema repository?\n\nIt would be nice if a java project that is using a particular schema can simply add it as a <dependency>\nSchema dependencies could be maintained nicely as well.  \n(Schemas would be developed in a schema maven project, taking advantage of versioning, dependencies...)\n\nWhat about exposing this Schema Service also as a Maven Repo transparently?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2014-09-09T22:09:22.390+0000","updated":"2014-09-09T22:09:22.390+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14165558","id":"14165558","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hello,\n\nLittle update on this.\n\n[~gwenshap]: I added the javadoc for integralKeys. Also fixed some more javadoc that was outdated or missing, but I haven't checked everything, so it might need some more javadoc improvements still.\n\n[~busbey]: I removed the unused import and fixed the inconsistent config names. Thanks (:\n\nBesides that, I've also added a (very terse) README and run script for launching the schema repo server.\n\nAttached is a new patch based off of 1.8.0-SNAPSHOT. Do you guys think this is good enough for committing into 1.8.0 ?\n\nIf anyone is interested in an already patched git branch, I got these:\n\nhttps://github.com/FelixGV/avro/tree/release-1.7.7-with-AVRO-1124\nhttps://github.com/FelixGV/avro/tree/1.8.0-SNAPSHOT-with-AVRO-1124\n\nThanks,\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-09T18:59:13.896+0000","updated":"2014-10-09T18:59:13.896+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14165649","id":"14165649","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"[~zolyfarkas], I don't think anyone suggested that yet. Are you saying every Avro record would be a different Maven artifact? In any medium- or large-size project, that would result in a huge number of artifacts, which would then result in huge dependency/build files. While it could work, I'm not convinced that it's a sensible use of Maven.\n\nLet me know if that's not what you meant or if I'm missing something.\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-09T20:05:01.524+0000","updated":"2014-10-09T20:05:01.524+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14165824","id":"14165824","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"Hi Felix.\n\nI agree, that versioning every avro record separately would not be practical. (although doable)\nLet me give an example of how I envision this with a example for a rest service:\n\n/demo-service\n  /demo-service-schema (versioned and released independently, will contain all avro schemas for this sample rest service)\n  /demo-service-server (depends on schema)\n ....\n/other-app (depends on schema)\n\nAll schemas will reside in the demo-service-schema project and will be built and versioned as a standard maven project. (together)\nschemas in demo-service-schema can depend on other schemas in other \"schema projects\" and this will be described with the maven dependency mechanism.\n\nPart of this \"schema build\" the java, c# record classes are generated, and the schema files are packaged and everything uploaded to maven repository. \n\nI managed to get this running without creating any special maven plugin... But I can see handy having an specialized plugin to verify schema compatibilities, enforce doc fields to be present...\n\nI also wrote a schema retrieval client that will retrieve any version of schema from a maven repository. \n(with local persistent caching on the file system)\n\nSome advantages to this approach:\n1) dependencies are clear, and easy to trace. (schemas are in one place, no more emailing around)\n2) classes are generated once and reused by all projects.\n3) version names are really whatever the dev wants, but major.minor works well\n4) no custom service needed, just a plain apache server will do.\n5) For in development schemas the maven SNAPSHOT fits pretty well\n\nlet me know what you think.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-09T21:55:36.136+0000","updated":"2014-10-09T21:55:36.136+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14165871","id":"14165871","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~zolyfarkas],\n\nI believe what you describe is a good solution for build management. In fact, I think lots of companies/projects already operate like this (minus the automated schema compatibility check, which could be handy to have as a maven task, indeed).\n\nI'm not sure how related this is to the effort described in the current ticket, however. It may be orthogonal. I think the main goal of the schema repo is to provide easy access to sets of ID=>schema pairs grouped per subject and to act as a gatekeeper for the creation of these pairs. Lumping all schemas in one versioned artifact makes sense from a build perspective but seems inconvenient from a programmatic standpoint when fine-grained look-ups might be desired. Say, if project A wants to use v1 of topic_x and v2 of topic_y, whereas project B wants the opposite (v2 of topic_x and v1 of topic_y), how does that translate to the single big artifact Maven model? Can things easily evolve independently like this?\n\nThat being said, I may not be grasping the value right now, but nothing prevents someone from taking this code and exposing a Maven-like HTTP interface form it, and/or using a real Maven repo as its backing storage implementation.","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-09T22:21:53.111+0000","updated":"2014-10-09T22:21:53.111+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14173820","id":"14173820","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"Hi Felix, it relates to this ticket by addressing the same motivation:\n\"It is nice to be able to pass around data in serialized form but still know the exact schema that was used to serialize it.\"\n\nWhat we implemented is to send the version of the schema(maven version) along with the avro messages. (HTTP header)\nat deserialization time this version is used to retrieve the writer schema from maven repo, without the need of a custom service.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T14:40:45.212+0000","updated":"2014-10-16T14:40:45.212+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14173844","id":"14173844","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"body":"You need a \"custom service\" because the client may not have the schema.\nSending the version is great if your client happens to have copies of all\nof them. Without a service to vend those schemas though you can't send a\nmessage to another service that doesn't have the latest ones yet.\n\nOn Thu, Oct 16, 2014 at 7:41 AM, Zoltan Farkas (JIRA) <jira@apache.org>\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T15:09:40.661+0000","updated":"2014-10-16T15:09:40.661+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14173861","id":"14173861","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"Hi Sam, \nYes you need a service, but that is what the maven repository is. (you can use nexus, artifactory or plain old apache HTTP)\nas I said: \"at deserialization time this version is used to retrieve the writer schema from maven repo\"\n\nThe client we implemented caches the schemas locally(persistent+ram) , but when a message is received with a version that it does not have, it will go to the maven repo and retrieve that schema, cache it and use it. ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T15:28:32.101+0000","updated":"2014-10-16T15:28:32.101+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14173867","id":"14173867","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara%40gmail.com","name":"spullara@gmail.com","key":"spullara@gmail.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"body":"I would never use the maven repo from production. YMMV.     \n\n---Sent from Boxer | http://getboxer.com\n\n\n\n    [ https://issues.apache.org/jira/browse/AVRO-1124?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14173861#comment-14173861 ]  \n\n\nZoltan Farkas commented on AVRO-1124:\n\n-------------------------------------\n\n\n\nHi Sam,  \nYes you need a service, but that is what the maven repository is. (you can use nexus, artifactory or plain old apache HTTP)\n\nas I said: \"at deserialization time this version is used to retrieve the writer schema from maven repo\"\n\n\n\nThe client we implemented caches the schemas locally(persistent+ram) , but when a message is received with a version that it does not have, it will go to the maven repo and retrieve that schema, cache it and use it.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n--\n\nThis message was sent by Atlassian JIRA\n\n(v6.3.4#6332)\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara%40gmail.com","name":"spullara@gmail.com","key":"spullara@gmail.com","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T15:37:41.006+0000","updated":"2014-10-16T15:37:41.006+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14173989","id":"14173989","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"Sam, a maven repo is nothing special, and we have a separate instance for this purpose... I see no reason for not using it from production...\nInstance is a plain apache server which I would argue is faster and more reliable than a java REST service...\nBy caching schemas and persisting locally, our services can weather outages on this instance pretty well....","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T17:22:24.805+0000","updated":"2014-10-16T17:22:24.805+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14174030","id":"14174030","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"body":"Ok, so, if what you are suggesting is that your solution is that URLs map\nto schemas based on the version, I think we are all in agreement. Let's\nspecify what those URLs look like and a way to add new schemas (PUT?) and\nwe have defined a REST service that does what we are looking for in this\nissue. I suggest not using the SC version though and instead canonically\nhashing the schema and using that hash in the URL.\n\nOn Thu, Oct 16, 2014 at 10:22 AM, Zoltan Farkas (JIRA) <jira@apache.org>\n\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=spullara","name":"spullara","key":"spullara","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Sam Pullara","active":true,"timeZone":"Etc/UTC"},"created":"2014-10-16T17:54:40.735+0000","updated":"2014-10-16T17:54:40.735+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14177812","id":"14177812","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hello,\n\nI talked with [~gwenshap] last week during Hadoop World and she made me see another point of view.\n\nI now think this project belongs outside of Avro. It has been built as a serialization-agnostic repository, so it is not tied to Avro at all. Furthermore, there's only a filesystem based storage backend at the moment, but I'm working on a Zookeeper backend (for HA) and other people have expressed interest in building RDBMS and HBase backends. It seems wrong for the Avro project to start depending on all these extra things just because of the schema repo.\n\nPerhaps the schema repo belongs in another project like HCatalog. That being said, I think being accepted as part of a bigger project should not be an impediment to developing the schema repo. Developing as part of a patch in a JIRA ticket or even as a fork of another project on GitHub is not a viable solution long-term.\n\nI'm going to pull the schema repo out of Avro and make it a standalone project so that it can be iterated on more quickly. If any bigger project wants to pull it into itself, they can do so whenever they want, as it's all Apache licensed (:\n\nI'll keep you posted. Please let me know if you have any comments or concerns.\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-21T01:44:45.809+0000","updated":"2014-10-21T01:44:45.809+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14177850","id":"14177850","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~felixgv] and others, I've been watching this thread for some time as over in Apache Gora (0) we are very interested in schema evolution... this ticket tickled my fancy and I really wish I had discovered it earlier.\nbq. Furthermore, there's only a filesystem based storage backend at the moment, but I'm working on a Zookeeper backend (for HA) and other people have expressed interest in building RDBMS and HBase backends.\nIf anyone is interested in implementing a backend agnostic (as far as datastore support goes in Gora) implementation of this service, then please get in touch with me directly or alternatively over in dev@gora. I would be very willing to put time into this effort.\nThank you\n(0) http://gora.apache.org","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-21T02:28:42.072+0000","updated":"2014-10-21T02:28:42.072+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14177868","id":"14177868","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~lewismc],\n\nThe code in this ticket is already backend agnostic. You configure it with a file and it dynamically injects the correct backend implementation at runtime. For now, the only provided implementation uses the local filesystem, but other backends should be easy to add.\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-21T03:03:45.114+0000","updated":"2014-10-21T03:03:45.114+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14177927","id":"14177927","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi [~felixgv] thanks for clarification.. the patch is a beast so I missed the key value config file {code}lang/java/schema-repo/bundle/config/config.properties{code}\nThanks for the corrections here, I must say however that my suggestion still stands :) if anyone is interested in implementing a Gora backend for this which would provide access to a number of underlying storage options then please get in touch. There could potentially be a much less investment in actual code writing if this were done in Gora instead of writing an HBase one, then a ZooKeeper one, etc. Thank you very much for the context [~felixgv]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-21T04:26:45.874+0000","updated":"2014-10-21T04:26:45.874+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14178542","id":"14178542","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=neoword","name":"neoword","key":"neoword","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"René X Parra","active":true,"timeZone":"America/Chicago"},"body":"[~felixgv] I, too, implemented and deployed a version of this patch backed by ZooKeeper / Curator (The zookeeper protocol is not for mere mortals, at least not for me :-) ). I also massaged the actual transport layer into an AVRO-IPC implementation (vs pure Jersey REST), making it easier to generate low-level polyglot clients to bind to the avro-schema registry/service.  Granted, it is arguable how much Avro-IPC vs raw http will get me. Time will tell. \n\nI look forward to seeing this work be promoted to RESOLVED state whether it is here in AVRO or some other project where it might more closely align.\n ","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=neoword","name":"neoword","key":"neoword","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"René X Parra","active":true,"timeZone":"America/Chicago"},"created":"2014-10-21T15:46:30.222+0000","updated":"2014-10-21T15:46:30.222+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14180149","id":"14180149","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"body":"[~felixgv] If you're pulling things out of Avro, consider moving the service implementation over to [Kite|http://kitesdk.org/]","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=busbey","name":"busbey","key":"busbey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=busbey&avatarId=13233","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=busbey&avatarId=13233","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=busbey&avatarId=13233","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=busbey&avatarId=13233"},"displayName":"Sean Busbey","active":true,"timeZone":"America/Chicago"},"created":"2014-10-22T16:46:15.534+0000","updated":"2014-10-22T16:46:15.534+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14180294","id":"14180294","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"Hi everyone,\n\nThe standalone repo is here: https://github.com/schema-repo/schema-repo\n\nThere is a stable 0.1.0 release here: https://github.com/schema-repo/schema-repo/tree/0.1.0\n\nThere is a mailing list here: https://groups.google.com/forum/#!forum/schema-repo\n\nHaving it separate should make it easy to build and integrate into whatever other project needs it, be it Kite, HCat or something else.\n\n[~lewismc], if you want to take a stab at creating a Gora backend, please go ahead!\n\n[~neoword], if you want to contribute your ZK/Curator backend, please go ahead!\n\n[~busbey], if you think Kite can benefit from the repo, please don't hesitate to integrate it.\n\nI'll handle pull requests for now, but it would be good if others helped with that in the future. I'll try to setup a GitHub-based maven repo to distribute the artifacts more easily ASAP.\n\nI suggest moving further discussions to the GG mailing list, since the single thread of this ticket is starting to be pretty chaotic with the half dozen discussions going on in parallel.\n\nThanks!\n\n-F","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-22T18:37:34.798+0000","updated":"2014-10-22T18:37:34.798+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/14180299","id":"14180299","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"body":"Fantastic, Github repos, starred, forked and I will begin working on this once I get through my TODO list of TODO's ;)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=lewismc","name":"lewismc","key":"lewismc","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=lewismc&avatarId=11337","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=lewismc&avatarId=11337","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=lewismc&avatarId=11337","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=lewismc&avatarId=11337"},"displayName":"Lewis John McGibbney","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-22T18:41:11.379+0000","updated":"2014-10-22T18:41:11.379+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/15139161","id":"15139161","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=alunarbeach","name":"alunarbeach","key":"alunarbeach","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=alunarbeach&avatarId=30258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alunarbeach&avatarId=30258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alunarbeach&avatarId=30258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alunarbeach&avatarId=30258"},"displayName":"Anbu Cheeralan","active":true,"timeZone":"America/New_York"},"body":"Is there any update on this?","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=alunarbeach","name":"alunarbeach","key":"alunarbeach","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=alunarbeach&avatarId=30258","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alunarbeach&avatarId=30258","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alunarbeach&avatarId=30258","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alunarbeach&avatarId=30258"},"displayName":"Anbu Cheeralan","active":true,"timeZone":"America/New_York"},"created":"2016-02-09T16:32:02.916+0000","updated":"2016-02-09T16:32:02.916+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/15139185","id":"15139185","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=neoword","name":"neoword","key":"neoword","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"René X Parra","active":true,"timeZone":"America/Chicago"},"body":"I for one, redact my previous note on contribution of a ZK/Curator backend, since [Confluent|http://confluent.io] now provides a perfectly good solution to an Avro-Based Schema Registry.\nIf you are looking for a good \"off-the-shelf\", \"out of the box\" avro schema registry solution, check out [Confluent's Schema Registry|http://docs.confluent.io/current/schema-registry/docs/index.html] -- it \"just works\". And the backend, well, its kafka itself!\n\nFull disclosure. I do not work for Confluent. Just a big fan of tech that \"works\". :-)\n\nGiven, that, I wonder what the life-cycle of this JIRA ticket is in 2016+ given that [Confluent's Schema Registry|https://github.com/confluentinc/schema-registry] exists.\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=neoword","name":"neoword","key":"neoword","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"René X Parra","active":true,"timeZone":"America/Chicago"},"created":"2016-02-09T16:45:09.188+0000","updated":"2016-02-09T16:45:09.188+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/16686565","id":"16686565","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"body":"I have recently published an example of what I described in earlier comment (using a maven repo as a schema repo REST service). With this approach, you get more than a schema repo, you get a validation/versioning/release system...\r\n\r\nExample is at:\r\n\r\nhttps://github.com/zolyfarkas/avro-schema-examples\r\n\r\nany comments welcome.\r\n\r\n\r\n\r\n","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=zolyfarkas","name":"zolyfarkas","key":"zolyfarkas","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Zoltan Farkas","active":true,"timeZone":"Etc/UTC"},"created":"2018-11-14T14:19:01.923+0000","updated":"2018-11-14T14:19:01.923+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/17598732","id":"17598732","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=santokhsdg","name":"santokhsdg","key":"santokhsdg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=santokhsdg&avatarId=37950","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=santokhsdg&avatarId=37950","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=santokhsdg&avatarId=37950","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=santokhsdg&avatarId=37950"},"displayName":"Santokh Singh","active":true,"timeZone":"Etc/UTC"},"body":"Hi all, is this project still active ? Surely would like to contribute and use :)","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=santokhsdg","name":"santokhsdg","key":"santokhsdg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=santokhsdg&avatarId=37950","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=santokhsdg&avatarId=37950","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=santokhsdg&avatarId=37950","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=santokhsdg&avatarId=37950"},"displayName":"Santokh Singh","active":true,"timeZone":"Etc/UTC"},"created":"2022-09-01T04:26:52.880+0000","updated":"2022-09-01T04:26:52.880+0000"},{"self":"https://issues.apache.org/jira/rest/api/2/issue/12598315/comment/17599469","id":"17599469","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"body":"No Santokh,\r\n\r\nThis issue is dead. The Avro maintainers should probably close it.\r\n\r\nThere are many open-source schema repos available nowadays:\r\n\r\nRedHat: https://github.com/apicurio/apicurio-registry\r\n\r\nConfluent: https://github.com/confluentinc/schema-registry\r\n\r\nCloudera: https://github.com/hortonworks/registry\r\n\r\nAnd no doubt many others. I would say it has become quite commoditized in recent years.\r\n\r\nGood luck!","updateAuthor":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2022-09-02T12:34:53.847+0000","updated":"2022-09-02T12:34:53.847+0000"}],"maxResults":100,"total":100,"startAt":0},"customfield_12311820":"0|i0e4hz:","customfield_12314139":null},"changelog":{"startAt":0,"maxResults":16,"total":16,"histories":[{"id":"13528712","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=jkreps","name":"jkreps","key":"jkreps","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Jay Kreps","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-09-01T00:00:31.174+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12543376","toString":"AVRO-1124-draft.patch"}]},{"id":"13581499","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2012-11-27T01:32:54.395+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12554947","toString":"AVRO-1124.patch"}]},{"id":"13687833","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-01T22:52:06.152+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12576448","toString":"AVRO-1124.patch"}]},{"id":"13691386","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:18:05.616+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12577249","toString":"AVRO-1124-validators-preliminary.patch"}]},{"id":"13691394","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-05T18:26:20.800+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12577252","toString":"AVRO-1124-can-read-with.patch"}]},{"id":"13711502","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=scott_carey","name":"scott_carey","key":"scott_carey","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Scott Carey","active":true,"timeZone":"America/Los_Angeles"},"created":"2013-04-30T20:05:44.066+0000","items":[{"field":"Link","fieldtype":"jira","from":null,"fromString":null,"to":"AVRO-1315","toString":"This issue is blocked by AVRO-1315"}]},{"id":"14118076","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-05T03:51:50.440+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12654165","toString":"AVRO-1124.2.patch"}]},{"id":"14121523","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gwenshap","name":"gwenshap","key":"gwenshap","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Gwen Shapira","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-07-09T15:39:19.123+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12654819","toString":"AVRO-1124.3.patch"}]},{"id":"14224495","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=felixgv","name":"felixgv","key":"felixgv","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Felix GV","active":true,"timeZone":"America/Los_Angeles"},"created":"2014-10-09T18:59:13.921+0000","items":[{"field":"Attachment","fieldtype":"jira","from":null,"fromString":null,"to":"12673962","toString":"AVRO-1124.4.patch"}]},{"id":"14692741","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=nphung","name":"nphung","key":"nphung","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Nicolas PHUNG","active":true,"timeZone":"Europe/Berlin"},"created":"2015-04-10T14:51:20.399+0000","items":[{"field":"Link","fieldtype":"jira","from":null,"fromString":null,"to":"AVRO-1661","toString":"This issue is duplicated by AVRO-1661"}]},{"id":"17339911","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=thiru_mg","name":"thiru_mg","key":"thiru_mg","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?avatarId=10452","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"},"displayName":"Thiruvalluvan M. G.","active":true,"timeZone":"Asia/Kolkata"},"created":"2018-12-30T05:43:33.976+0000","items":[{"field":"Component","fieldtype":"jira","from":null,"fromString":null,"to":"12312780","toString":"java"}]},{"id":"19399727","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gmcdonald","name":"gmcdonald","key":"ipv6guru","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ipv6guru&avatarId=10405","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ipv6guru&avatarId=10405","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ipv6guru&avatarId=10405","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ipv6guru&avatarId=10405"},"displayName":"Gavin McDonald","active":true,"timeZone":"Europe/London"},"created":"2021-01-10T16:45:49.088+0000","items":[{"field":"Workflow","fieldtype":"jira","from":"12711030","fromString":"no-reopen-closed, patch-avail","to":"13750012","toString":"patch-available, re-open possible"}]},{"id":"19427979","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=gmcdonald","name":"gmcdonald","key":"ipv6guru","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=ipv6guru&avatarId=10405","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=ipv6guru&avatarId=10405","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=ipv6guru&avatarId=10405","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=ipv6guru&avatarId=10405"},"displayName":"Gavin McDonald","active":true,"timeZone":"Europe/London"},"created":"2021-01-10T18:38:22.923+0000","items":[{"field":"Workflow","fieldtype":"jira","from":"13750012","fromString":"patch-available, re-open possible","to":"13778147","toString":"no-reopen-closed, patch-avail"}]},{"id":"20487707","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=iroh","name":"iroh","key":"JIRAUSER280391","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280391&avatarId=52383","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280391&avatarId=52383","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280391&avatarId=52383","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280391&avatarId=52383"},"displayName":"Chris Wells","active":true,"timeZone":"Asia/Shanghai"},"created":"2022-03-03T15:08:49.849+0000","items":[{"field":"Workflow","fieldtype":"jira","from":"13778147","fromString":"no-reopen-closed, patch-avail","to":"13909174","toString":"patch-available, re-open possible"}]},{"id":"20490892","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=iroh","name":"iroh","key":"JIRAUSER280391","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280391&avatarId=52383","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280391&avatarId=52383","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280391&avatarId=52383","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280391&avatarId=52383"},"displayName":"Chris Wells","active":true,"timeZone":"Asia/Shanghai"},"created":"2022-03-03T15:10:54.120+0000","items":[{"field":"Workflow","fieldtype":"jira","from":"13909174","fromString":"patch-available, re-open possible","to":"13912343","toString":"no-reopen-closed, patch-avail"}]},{"id":"20895107","author":{"self":"https://issues.apache.org/jira/rest/api/2/user?username=mgrigorov","name":"mgrigorov","key":"mgrigorov","avatarUrls":{"48x48":"https://issues.apache.org/jira/secure/useravatar?ownerId=mgrigorov&avatarId=25634","24x24":"https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mgrigorov&avatarId=25634","16x16":"https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mgrigorov&avatarId=25634","32x32":"https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mgrigorov&avatarId=25634"},"displayName":"Martin Tzvetanov Grigorov","active":true,"timeZone":"Europe/Helsinki"},"created":"2022-09-07T11:16:18.393+0000","items":[{"field":"resolution","fieldtype":"jira","from":null,"fromString":null,"to":"10011","toString":"Won't Do"},{"field":"status","fieldtype":"jira","from":"1","fromString":"Open","to":"5","toString":"Resolved"}]}]}}